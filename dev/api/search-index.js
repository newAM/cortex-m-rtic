var searchIndex = JSON.parse('{\
"bare_metal":{"doc":"Abstractions common to bare metal systems.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CriticalSection","Mutex","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","fmt","fmt","from","from","get_mut","into","into","into_inner","new","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["bare_metal","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Critical section token.","A “mutex” based on critical sections.","","","Borrows the data for the duration of the critical section.","","","","","","","","Gets a mutable reference to the contained value when the …","","","Unwraps the contained value, consuming the mutex.","Creates a critical section token.","Creates a new mutex.","","","","","",""],"i":[0,0,1,2,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[["criticalsection",3]]],[[]],[[]],[[],["criticalsection",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"CriticalSection"],[3,"Mutex"]]},\
"bitfield":{"doc":"This crate provides macros to generate bitfield-like …","t":[8,8,10,10,14,14,14,14,10,10],"n":["Bit","BitRange","bit","bit_range","bitfield","bitfield_bitrange","bitfield_debug","bitfield_fields","set_bit","set_bit_range"],"q":["bitfield","","","","","","","","",""],"d":["A trait to get or set a single bit.","A trait to get or set ranges of bits.","Get a single bit.","Get a range of bits.","Combines <code>bitfield_bitrange</code> and <code>bitfield_fields</code>.","Implements <code>BitRange</code> for a tuple struct (or “newtype”).","Generates a <code>fmt::Debug</code> implementation.","Declares the fields of struct.","Set a single bit.","Set a range of bits."],"i":[0,0,1,2,0,0,0,0,1,2],"f":[null,null,[[["usize",15]],["bool",15]],[[["usize",15]]],null,null,null,null,[[["usize",15],["bool",15]]],[[["usize",15]]]],"p":[[8,"Bit"],[8,"BitRange"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[],["f32",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["i128",15]],[[]],[[],["i16",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["i128",15]]],[[]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[["i64",15]]],[[]],[[]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"cortex_m":{"doc":"Low level access to Cortex-M processors","t":[0,0,0,14,14,0,0,0,0,14,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,8,11,11,11,11,11,5,5,5,11,11,11,11,11,11,10,10,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,5,5,5,5,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,12,3,12,3,12,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,12,12,12,12,12,12,12,11,12,12,11,11,11,11,4,13,13,3,12,12,11,11,11,11,12,12,11,12,12,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,3,11,11,12,12,12,12,11,11,11,11,11,3,3,11,11,11,11,12,12,12,12,12,12,12,11,11,12,11,11,12,12,12,12,12,12,11,11,11,11,11,11,3,11,11,12,12,11,11,12,12,12,11,11,11,3,11,11,12,12,12,11,11,12,11,11,11,3,12,11,11,11,12,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,3,11,11,11,12,12,12,11,12,12,12,12,11,11,11,13,13,13,13,4,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,4,13,13,13,4,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,4,11,11,11,11,12,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,3,12,12,11,11,12,12,11,11,12,12,12,12,11,11,11,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,0,0,0,0,0,0,5,5,5,13,3,4,13,13,4,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,13,13,4,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5],"n":["asm","delay","interrupt","iprint","iprintln","itm","peripheral","prelude","register","singleton","bkpt","bootload","bootstrap","delay","dmb","dsb","isb","nop","semihosting_syscall","sev","udf","wfe","wfi","Delay","borrow","borrow_mut","delay_ms","delay_ms","delay_ms","delay_ms","delay_ms","delay_us","delay_us","delay_us","delay_us","delay_us","free","from","into","new","try_from","try_into","type_id","CriticalSection","InterruptNumber","Mutex","Nr","borrow","borrow","borrow","borrow_mut","borrow_mut","disable","enable","free","from","from","into","into","new","new","nr","number","try_from","try_from","try_into","try_into","type_id","type_id","0","Aligned","borrow","borrow_mut","from","into","try_from","try_into","type_id","write_aligned","write_all","write_fmt","write_str","CBP","CBP","CPUID","CPUID","DCB","DCB","DWT","DWT","FPB","FPB","FPU","FPU","ICB","ICB","ITM","ITM","MPU","MPU","NVIC","NVIC","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","PTR","Peripherals","SAU","SAU","SCB","SCB","SYST","SYST","TPIU","TPIU","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpiall","cache_dminline","cache_iminline","cache_num_sets_ways","cbp","clean_dcache","clean_dcache_by_address","clean_dcache_by_ref","clean_dcache_by_slice","clean_invalidate_dcache","clean_invalidate_dcache_by_address","clear_current","clear_pendst","clear_pendsv","clear_sleepdeep","clear_sleeponexit","cpuid","dcache_enabled","dcb","dccimvac","dccisw","dccmvac","dccmvau","dccsw","dcimvac","dcisw","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","disable","disable_counter","disable_dcache","disable_icache","disable_interrupt","disable_trace","dwt","enable","enable_counter","enable_cycle_counter","enable_dcache","enable_icache","enable_interrupt","enable_trace","fpb","fpu","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_clock_source","get_current","get_cycle_count","get_priority","get_priority","get_reload","get_ticks_per_10ms","has_reference_clock","has_wrapped","icache_enabled","icb","iciallu","icimvau","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invalidate_dcache_by_address","invalidate_dcache_by_ref","invalidate_dcache_by_slice","invalidate_icache","is_active","is_counter_enabled","is_debugger_attached","is_enabled","is_enabled","is_interrupt_enabled","is_pending","is_pendst_pending","is_pendsv_pending","is_precise","itm","mask","mpu","nvic","pend","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","ptr","request","scb","select_cache","set_clock_source","set_pendst","set_pendsv","set_priority","set_priority","set_reload","set_sleepdeep","set_sleeponexit","steal","sys_reset","syst","take","tpiu","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unmask","unpend","vect_active","RegisterBlock","borrow","borrow_mut","bpiall","dccimvac","dccisw","dccmvac","dccmvau","dccsw","dcimvac","dcisw","from","iciallu","icimvau","into","try_from","try_into","type_id","CsselrCacheType","DataOrUnified","Instruction","RegisterBlock","afr","base","borrow","borrow","borrow_mut","borrow_mut","ccsidr","clidr","clone","csselr","ctr","dfr","eq","fmt","from","from","into","into","isar","mmfr","pfr","try_from","try_from","try_into","try_into","type_id","type_id","RegisterBlock","borrow","borrow_mut","dcrdr","dcrsr","demcr","dhcsr","from","into","try_from","try_into","type_id","Comparator","RegisterBlock","borrow","borrow","borrow_mut","borrow_mut","c","comp","cpicnt","ctrl","cyccnt","exccnt","foldcnt","from","from","function","into","into","lar","lsr","lsucnt","mask","pcsr","sleepcnt","try_from","try_from","try_into","try_into","type_id","type_id","RegisterBlock","borrow","borrow_mut","comp","ctrl","from","into","lar","lsr","remap","try_from","try_into","type_id","RegisterBlock","borrow","borrow_mut","fpcar","fpccr","fpdscr","from","into","mvfr","try_from","try_into","type_id","RegisterBlock","actlr","borrow","borrow_mut","from","ictr","into","try_from","try_into","type_id","RegisterBlock","Stim","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_fifo_ready","lar","lsr","stim","tcr","ter","tpr","try_from","try_from","try_into","try_into","type_id","type_id","write_u16","write_u32","write_u8","RegisterBlock","_type","borrow","borrow_mut","ctrl","from","into","rasr","rasr_a1","rasr_a2","rasr_a3","rbar","rbar_a1","rbar_a2","rbar_a3","rnr","try_from","try_into","type_id","RegisterBlock","borrow","borrow_mut","from","iabr","icer","icpr","into","ipr","iser","ispr","stir","try_from","try_into","type_id","BusFault","BusFault","DebugMonitor","DebugMonitor","Exception","Exception","HardFault","Interrupt","MemoryManagement","MemoryManagement","NonMaskableInt","PendSV","PendSV","RegisterBlock","SVCall","SVCall","SecureFault","SecureFault","SysTick","SysTick","SystemHandler","ThreadMode","UsageFault","UsageFault","VectActive","afsr","aircr","bfar","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccr","cfsr","clone","clone","clone","cpacr","dfsr","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","hfsr","icsr","into","into","into","into","irqn","mmfar","ne","scr","shcsr","shpr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vtor","irqn","Core","External","RegisterBlock","SystClkSource","borrow","borrow","borrow_mut","borrow_mut","calib","clone","csr","cvr","eq","fmt","from","from","into","into","rvr","try_from","try_from","try_into","try_into","type_id","type_id","RegisterBlock","_type","acpr","borrow","borrow_mut","cspsr","ffcr","from","into","lar","lsr","sppr","sspsr","try_from","try_into","type_id","Duty","Error","Error","Error","Error","Error","Error","Error","Error","Error","Time","_embedded_hal_PwmPin","_embedded_hal_blocking_delay_DelayMs","_embedded_hal_blocking_delay_DelayUs","_embedded_hal_blocking_i2c_Read","_embedded_hal_blocking_i2c_Write","_embedded_hal_blocking_i2c_WriteRead","_embedded_hal_blocking_serial_Write","_embedded_hal_blocking_spi_Transfer","_embedded_hal_blocking_spi_Write","_embedded_hal_digital_OutputPin","_embedded_hal_serial_Read","_embedded_hal_serial_Write","_embedded_hal_spi_FullDuplex","_embedded_hal_timer_CountDown","bflush","bwrite_all","delay_ms","delay_us","disable","enable","flush","get_duty","get_max_duty","read","read","read","send","set_duty","set_high","set_low","start","transfer","wait","write","write","write","write_read","write_str","basepri","basepri_max","control","faultmask","msp","primask","psp","read","write","write","Active","Control","Fpca","Msp","NotActive","Npriv","Privileged","Psp","Spsel","Unprivileged","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","fmt","fpca","from","from","from","from","from_bits","into","into","into","into","is_active","is_msp","is_not_active","is_privileged","is_psp","is_unprivileged","npriv","read","set_fpca","set_npriv","set_spsel","spsel","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","Active","Faultmask","Inactive","borrow","borrow_mut","clone","eq","fmt","from","into","is_active","is_inactive","read","try_from","try_into","type_id","read","write","Active","Inactive","Primask","borrow","borrow_mut","clone","eq","fmt","from","into","is_active","is_inactive","read","try_from","try_into","type_id","read","write"],"q":["cortex_m","","","","","","","","","","cortex_m::asm","","","","","","","","","","","","","cortex_m::delay","","","","","","","","","","","","","","","","","","","","cortex_m::interrupt","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::itm","","","","","","","","","","","","","cortex_m::peripheral","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::cbp","","","","","","","","","","","","","","","","","","cortex_m::peripheral::cpuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::dcb","","","","","","","","","","","","cortex_m::peripheral::dwt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::fpb","","","","","","","","","","","","","cortex_m::peripheral::fpu","","","","","","","","","","","","cortex_m::peripheral::icb","","","","","","","","","","cortex_m::peripheral::itm","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::mpu","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::nvic","","","","","","","","","","","","","","","cortex_m::peripheral::scb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::scb::VectActive","cortex_m::peripheral::syst","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::peripheral::tpiu","","","","","","","","","","","","","","","","cortex_m::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::register","","","","","","","cortex_m::register::basepri","","cortex_m::register::basepri_max","cortex_m::register::control","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cortex_m::register::faultmask","","","","","","","","","","","","","","","","cortex_m::register::msp","","cortex_m::register::primask","","","","","","","","","","","","","","","","cortex_m::register::psp",""],"d":["Miscellaneous assembly instructions","A delay driver based on SysTick.","Interrupts","Macro for sending a formatted string through an ITM …","Macro for sending a formatted string through an ITM …","Instrumentation Trace Macrocell","Core peripherals.","Prelude","Processor core registers","Macro to create a mutable reference to a statically …","Puts the processor in Debug state. Debuggers can pick …","Bootload.","Bootstrap.","Blocks the program for <em>at least</em> <code>cycles</code> CPU cycles.","Data Memory Barrier","Data Synchronization Barrier","Instruction Synchronization Barrier","A no-operation. Useful to prevent delay loops from being …","Semihosting syscall.","Send Event","Generate an Undefined Instruction exception.","Wait For Event","Wait For Interrupt","System timer (SysTick) as a delay provider.","","","","","","Delay using the Cortex-M systick for a certain duration, …","","","","","Delay using the Cortex-M systick for a certain duration, …","","Releases the system timer (SysTick) resource.","","","Configures the system timer (SysTick) as a delay provider.","","","","Critical section token","Trait for enums of external interrupt numbers.","A “mutex” based on critical sections","Interrupt number","","","Borrows the data for the duration of the critical section","","","Disables all interrupts","Enables all the interrupts","Execute closure <code>f</code> in an interrupt-free context.","","","","","Creates a critical section token","Creates a new mutex","Returns the number associated with an interrupt","Return the interrupt number associated with this variant.","","","","","","","","A wrapper type that aligns its contents on a 4-Byte …","","","","","","","","Writes a 4-byte aligned <code>buffer</code> to an ITM port.","Writes <code>buffer</code> to an ITM port.","Writes <code>fmt::Arguments</code> to the ITM <code>port</code>","Writes a string to the ITM <code>port</code>","Cache and branch predictor maintenance operations","Cache and branch predictor maintenance operations. Not …","CPUID","CPUID","Debug Control Block","Debug Control Block","Data Watchpoint and Trace unit","Data Watchpoint and Trace unit","Flash Patch and Breakpoint unit","Flash Patch and Breakpoint unit. Not available on Armv6-M.","Floating Point Unit","Floating Point Unit.","Implementation Control Block.","Implementation Control Block.","Instrumentation Trace Macrocell","Instrumentation Trace Macrocell. Not available on Armv6-M …","Memory Protection Unit","Memory Protection Unit","Nested Vector Interrupt Controller","Nested Vector Interrupt Controller","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Pointer to the register block","Core peripherals","Security Attribution Unit","Security Attribution Unit","System Control Block","System Control Block","SysTick: System Timer","SysTick: System Timer","Trace Port Interface Unit","Trace Port Interface Unit. Not available on Armv6-M.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Branch predictor invalidate all","Returns log2 of the number of words in the smallest cache …","Returns log2 of the number of words in the smallest cache …","Returns the number of sets and ways in the selected cache","Cache and branch predictor maintenance operations","Cleans the entire D-cache.","Cleans D-cache by address.","Cleans an object from the D-cache.","Cleans a slice from D-cache.","Cleans and invalidates the entire D-cache.","Cleans and invalidates D-cache by address.","Clears current value to 0","Set the PENDSTCLR bit in the ICSR register which will …","Set the PENDSVCLR bit in the ICSR register which will …","Clear the SLEEPDEEP bit in the SCR register","Clear the SLEEPONEXIT bit in the SCR register","CPUID","Returns whether the D-cache is currently enabled.","Debug Control Block","D-cache clean and invalidate by MVA to PoC","D-cache clean and invalidate by set-way","D-cache clean by MVA to PoC","D-cache clean by MVA to PoU","D-cache clean by set-way","D-cache invalidate by MVA to PoC","D-cache invalidate by set-way","","","","","","","","","","","","","","","","Disable the exception","Disables counter","Disables D-cache if currently enabled.","Disables I-cache if currently enabled.","Disables SysTick interrupt","Disables TRACE. See <code>DCB::enable_trace()</code> for more details","Data Watchpoint and Trace unit","Enable the exception","Enables counter","Enables the cycle counter","Enables D-cache if currently disabled.","Enables I-cache if currently disabled.","Enables SysTick interrupt","Enables TRACE. This is for example required by the …","Flash Patch and Breakpoint unit","Floating Point Unit","","","","","","","","","","","","","","","","Gets clock source","Gets current value","Returns the current clock cycle count","Returns the NVIC priority of <code>interrupt</code>","Returns the hardware priority of <code>system_handler</code>","Gets reload value","Returns the reload value with which the counter would …","Checks if an external reference clock is available","Checks if the counter wrapped (underflowed) since the …","Returns whether the I-cache is currently enabled.","Implementation Control Block","I-cache invalidate all to PoU","I-cache invalidate by MVA to PoU","","","","","","","","","","","","","","","","Invalidates D-cache by address.","Invalidates an object from the D-cache.","Invalidates a slice from the D-cache.","Invalidates the entire I-cache.","Is <code>interrupt</code> active or pre-empted and stacked","Checks if counter is enabled","Is there a debugger attached? (see note)","Checks if <code>interrupt</code> is enabled","Check if an exception is enabled","Checks if SysTick interrupt is enabled","Checks if <code>interrupt</code> is pending","Check if PENDSTSET bit in the ICSR register is set …","Check if PENDSVSET bit in the ICSR register is set …","Checks if the calibration value is precise","Instrumentation Trace Macrocell","Disables <code>interrupt</code>","Memory Protection Unit","Nested Vector Interrupt Controller","Forces <code>interrupt</code> into pending state","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Returns a pointer to the register block (to be deprecated …","Request an IRQ in software","System Control Block","Selects the current CCSIDR","Sets clock source","Set the PENDSTSET bit in the ICSR register which will …","Set the PENDSVSET bit in the ICSR register which will …","Sets the “priority” of <code>interrupt</code> to <code>prio</code>","Sets the hardware priority of <code>system_handler</code> to <code>prio</code>","Sets reload value","Set the SLEEPDEEP bit in the SCR register","Set the SLEEPONEXIT bit in the SCR register","Unchecked version of <code>Peripherals::take</code>","Initiate a system reset request to reset the MCU","SysTick: System Timer","Returns all the core peripherals <em>once</em>","Trace Port Interface Unit;","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes the software lock on the DWT","Enables <code>interrupt</code>","Clears <code>interrupt</code>’s pending state","Returns the active exception number","Register block","","","Branch predictor invalidate all","D-cache clean and invalidate by MVA to PoC","D-cache clean and invalidate by set-way","D-cache clean by MVA to PoC","D-cache clean by MVA to PoU","D-cache clean by set-way","D-cache invalidate by MVA to PoC","D-cache invalidate by set-way","","I-cache invalidate all to PoU","I-cache invalidate by MVA to PoU","","","","","Type of cache to select on CSSELR writes.","Select DCache or unified cache","Select ICache","Register block","Auxiliary Feature (not present on Cortex-M0 variants)","CPUID base","","","","","Cache Size ID (only present on Cortex-M7)","Cache Level ID (only present on Cortex-M7)","","Cache Size Selection (only present on Cortex-M7)","Cache Type (only present on Cortex-M7)","Debug Feature (not present on Cortex-M0 variants)","","","","","","","Instruction Set Attribute (not present on Cortex-M0 …","Memory Model Feature (not present on Cortex-M0 variants)","Processor Feature (not present on Cortex-M0 variants)","","","","","","","Register block","","","Debug Core Register Data","Debug Core Register Selector","Debug Exception and Monitor Control","Debug Halting Control and Status","","","","","","Comparator","Register block","","","","","Comparators","Comparator","CPI Count","Control","Cycle Count","Exception Overhead Count","Folded-instruction Count","","","Comparator Function","","","Lock Access","Lock Status","LSU Count","Comparator Mask","Program Counter Sample","Sleep Count","","","","","","","Register block","","","Comparator","Control","","","Lock Access","Lock Status","Remap","","","","Register block","","","Floating Point Context Address","Floating Point Context Control","Floating Point Default Status Control","","","Media and FP Feature","","","","Register block","Auxiliary Control Register","","","","Interrupt Controller Type Register","","","","","Register block","Stimulus Port","","","","","","","","","Returns <code>true</code> if the stimulus port is ready to accept more …","Lock Access","Lock Status","Stimulus Port","Trace Control","Trace Enable","Trace Privilege","","","","","","","Writes an <code>u16</code> payload into the stimulus port","Writes an <code>u32</code> payload into the stimulus port","Writes an <code>u8</code> payload into the stimulus port","Register block for ARMv7-M","Type","","","Control","","","Region Attribute and Size","Alias 1 of RASR","Alias 2 of RASR","Alias 3 of RASR","Region Base Address","Alias 1 of RBAR","Alias 2 of RBAR","Alias 3 of RBAR","Region Number","","","","Register block","","","","Interrupt Active Bit (not present on Cortex-M0 variants)","Interrupt Clear-Enable","Interrupt Clear-Pending","","Interrupt Priority","Interrupt Set-Enable","Interrupt Set-Pending","Software Trigger Interrupt","","","","Bus fault interrupt (not present on Cortex-M0 variants)","Bus fault interrupt (not present on Cortex-M0 variants)","Debug monitor interrupt (not present on Cortex-M0 …","Debug monitor interrupt (not present on Cortex-M0 …","Processor core exceptions (internal interrupts)","Processor core exception (internal interrupts)","Hard fault interrupt","Device specific exception (external interrupts)","Memory management interrupt (not present on Cortex-M0 …","Memory management interrupt (not present on Cortex-M0 …","Non maskable interrupt","Pend SV interrupt","Pend SV interrupt","Register block","SV call interrupt","SV call interrupt","Secure fault interrupt (only on ARMv8-M)","Secure fault interrupt (only on ARMv8-M)","System Tick interrupt","System Tick interrupt","System handlers, exceptions with configurable priority","Thread mode","Usage fault interrupt (not present on Cortex-M0 variants)","Usage fault interrupt (not present on Cortex-M0 variants)","Active exception number","Auxiliary Fault Status (not present on Cortex-M0 variants)","Application Interrupt and Reset Control","BusFault Address (not present on Cortex-M0 variants)","","","","","","","","","Configuration and Control","Configurable Fault Status (not present on Cortex-M0 …","","","","Coprocessor Access Control (not present on Cortex-M0 …","Debug Fault Status (not present on Cortex-M0 variants)","","","","","","","","","Converts a <code>byte</code> into <code>VectActive</code>","","","HardFault Status (not present on Cortex-M0 variants)","Interrupt Control and State","","","","","Returns the IRQ number of this <code>Exception</code>","MemManage Fault Address (not present on Cortex-M0 …","","System Control","System Handler Control and State","System Handler Priority (word accessible only on …","","","","","","","","","","","","","Vector Table Offset (not present on Cortex-M0 variants)","Interrupt number. This number is always within half open …","Core-provided clock","External reference clock","Register block","SysTick clock source","","","","","Calibration Value","","Control and Status","Current Value","","","","","","","Reload Value","","","","","","","Register block","TPIU Type","Asynchronous Clock Prescaler","","","Current Parallel Port Size","Formatter and Flush Control","","","Lock Access","Lock Status","Selected Pin Control","Supported Parallel Port Sizes","","","","Type for the <code>duty</code> methods","Error type","Error type","Error type","The type of error that can occur when writing","Error type","Error type","Read error","Write error","An enumeration of SPI errors","The unit of time used by this timer","A single PWM channel / pin","Millisecond delay","Microsecond delay","Blocking read","Blocking write","Blocking write + read","Write half of a serial interface (blocking variant)","Blocking transfer","Blocking write","Single digital push-pull output pin","Read half of a serial interface","Write half of a serial interface","Full duplex (master mode)","A count down timer","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Disables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","Ensures that none of the previously written words are …","Returns the current duty cycle","Returns the maximum duty cycle value","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","Reads a single word from the serial interface","Reads the word stored in the shift register","Sends a word to the slave","Sets a new duty cycle","Drives the pin high","Drives the pin low","Starts a new count down","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","Non-blockingly “waits” until the count down finishes","Writes bytes to slave with address <code>address</code>","Sends <code>words</code> to the slave, ignoring all the incoming words","Writes a single word to the serial interface","Writes bytes to slave with address <code>address</code> and then reads …","","Base Priority Mask Register","Base Priority Mask Register (conditional write)","Control register","Fault Mask Register","Main Stack Pointer","Priority mask register","Process Stack Pointer","Reads the CPU register","Writes to the CPU register","Writes to BASEPRI <em>if</em>","Floating-point context active.","Control register","Whether context floating-point is currently active","MSP is the current stack pointer","No floating-point context active","Thread mode privilege level","Privileged","PSP is the current stack pointer","Currently active stack pointer","Unprivileged","Returns the contents of the register as raw bits","","","","","","","","","","","","","","","","","","","","Whether context floating-point is currently active","","","","","Creates a <code>Control</code> value from raw bits.","","","","","Is a floating-point context active?","Is MSP the current stack pointer?","Is a floating-point context not active?","Is in privileged thread mode?","Is PSP the current stack pointer?","Is in unprivileged thread mode?","Thread mode privilege level","Reads the CPU register","Sets the FPCA value.","Sets the thread mode privilege level value (nPRIV).","Sets the SPSEL value.","Currently active stack pointer","","","","","","","","","","","","","Writes to the CPU register.","Active","All exceptions are …","Inactive, expect for NMI","","","","","","","","All exceptions are active","All exceptions, except for NMI, are inactive","Reads the CPU register","","","","Reads the CPU register","Writes <code>bits</code> to the CPU register","Active","Inactive","All exceptions with configurable priority are …","","","","","","","","All exceptions with configurable priority are active","All exceptions with configurable priority are inactive","Reads the CPU register","","","","Reads the CPU register","Writes <code>bits</code> to the CPU register"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,3,3,2,3,0,0,0,2,3,2,3,2,3,4,5,2,3,2,3,2,3,6,0,6,6,6,6,6,6,6,0,0,0,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,0,7,0,7,0,7,0,7,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,8,9,9,9,0,18,18,18,18,18,18,19,18,18,18,18,0,18,0,8,8,8,8,8,8,8,8,9,10,11,12,13,14,15,16,17,18,19,20,14,15,18,19,18,18,19,10,0,18,19,11,18,18,19,10,0,0,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,19,19,11,17,18,19,19,19,19,18,0,8,8,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,18,18,18,18,17,19,10,17,18,19,17,18,18,19,0,17,0,0,17,8,9,10,11,12,13,14,15,16,17,18,19,20,17,0,9,19,18,18,17,18,19,18,18,7,18,0,7,0,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,7,8,9,10,11,12,13,14,15,16,17,21,18,19,20,11,17,17,18,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,0,24,24,24,23,24,23,24,24,23,24,24,24,23,23,24,23,24,23,24,24,24,24,23,24,23,24,23,0,25,25,25,25,25,25,25,25,25,25,25,0,0,26,27,26,27,26,27,26,26,26,26,26,26,27,27,26,27,26,26,26,27,26,26,26,27,26,27,26,27,0,28,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,0,0,31,32,31,32,31,32,31,32,32,31,31,31,31,31,31,31,32,31,32,31,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,35,36,0,37,35,37,35,36,35,35,36,0,35,36,35,36,35,36,0,37,35,36,0,38,38,38,38,35,37,36,38,35,37,36,38,38,35,37,36,38,38,35,37,36,35,37,36,38,35,37,37,36,38,38,38,35,37,36,35,38,37,38,38,38,38,35,37,36,38,35,37,36,38,35,37,36,38,39,40,40,0,0,41,40,41,40,41,40,41,41,40,40,41,40,41,40,41,41,40,41,40,41,40,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,44,45,46,47,48,49,50,51,52,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,54,55,43,43,51,43,43,44,50,52,52,43,56,56,53,48,53,45,49,51,46,51,0,0,0,0,0,0,0,0,0,0,57,0,0,58,57,0,59,58,0,59,60,60,59,58,57,60,59,58,57,60,59,58,57,59,58,57,60,59,58,57,60,60,59,58,57,60,60,59,58,57,57,58,57,59,58,59,60,0,60,60,60,60,60,59,58,57,60,59,58,57,60,59,58,57,0,61,0,61,61,61,61,61,61,61,61,61,61,0,61,61,61,0,0,62,62,0,62,62,62,62,62,62,62,62,62,0,62,62,62,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["u32",15]]],[[["i32",15]]],[[["u8",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u32",15]]],[[["i32",15]]],[[["u32",15]]],[[["u8",15]]],[[],["syst",3]],[[]],[[]],[[["u32",15],["syst",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[["criticalsection",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["criticalsection",3]],[[],["mutex",3]],[[],["u8",15]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["stim",3],["aligned",3]]],[[["stim",3]]],[[["stim",3],["arguments",3]]],[[["stim",3],["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[["u8",15],["csselrcachetype",4]]],null,[[["cpuid",3]]],[[["usize",15]]],[[]],[[]],[[["cpuid",3]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],null,[[["u32",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u32",15]]],[[["u16",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["exception",4]]],[[]],[[["cpuid",3]]],[[]],[[]],[[]],null,[[["exception",4]]],[[]],[[]],[[["cpuid",3]]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["systclksource",4]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],[[["systemhandler",4]],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["exception",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u8",15],["csselrcachetype",4]]],[[["systclksource",4]]],[[]],[[]],[[["u8",15]]],[[["u8",15],["systemhandler",4]]],[[["u32",15]]],[[]],[[]],[[]],[[]],null,[[],["option",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["vectactive",4]],null,[[]],[[]],null,null,null,null,null,null,null,null,[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["csselrcachetype",4]],null,null,null,[[["csselrcachetype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u16",15]]],[[["u32",15]]],[[["u8",15]]],null,null,[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["exception",4]],[[],["vectactive",4]],[[],["systemhandler",4]],null,null,[[["exception",4]],["bool",15]],[[["vectactive",4]],["bool",15]],[[["systemhandler",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["option",4]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["i8",15]],null,[[["vectactive",4]],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["systclksource",4]],null,null,[[["systclksource",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],null,null,[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",4]]],[[]],[[]],[[],["result",4]],[[],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],[["error",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["error",4]]],[[],["result",4]],[[["str",15]],[["error",3],["result",4]]],null,null,null,null,null,null,null,[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["control",3]],[[],["npriv",4]],[[],["spsel",4]],[[],["fpca",4]],[[["npriv",4]],["bool",15]],[[["spsel",4]],["bool",15]],[[["fpca",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["fpca",4]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["npriv",4]],[[],["control",3]],[[["fpca",4]]],[[["npriv",4]]],[[["spsel",4]]],[[],["spsel",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["control",3]]],null,null,null,[[]],[[]],[[],["faultmask",4]],[[["faultmask",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["faultmask",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],[[["u32",15]]],null,null,null,[[]],[[]],[[],["primask",4]],[[["primask",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["primask",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],[[["u32",15]]]],"p":[[3,"Delay"],[3,"CriticalSection"],[3,"Mutex"],[8,"Nr"],[8,"InterruptNumber"],[3,"Aligned"],[3,"Peripherals"],[3,"CBP"],[3,"CPUID"],[3,"DCB"],[3,"DWT"],[3,"FPB"],[3,"FPU"],[3,"ICB"],[3,"ITM"],[3,"MPU"],[3,"NVIC"],[3,"SCB"],[3,"SYST"],[3,"TPIU"],[3,"SAU"],[3,"RegisterBlock"],[4,"CsselrCacheType"],[3,"RegisterBlock"],[3,"RegisterBlock"],[3,"RegisterBlock"],[3,"Comparator"],[3,"RegisterBlock"],[3,"RegisterBlock"],[3,"RegisterBlock"],[3,"RegisterBlock"],[3,"Stim"],[3,"RegisterBlock"],[3,"RegisterBlock"],[4,"Exception"],[4,"SystemHandler"],[4,"VectActive"],[3,"RegisterBlock"],[13,"Interrupt"],[4,"SystClkSource"],[3,"RegisterBlock"],[3,"RegisterBlock"],[8,"_embedded_hal_PwmPin"],[8,"_embedded_hal_blocking_i2c_Read"],[8,"_embedded_hal_blocking_i2c_Write"],[8,"_embedded_hal_blocking_i2c_WriteRead"],[8,"_embedded_hal_blocking_serial_Write"],[8,"_embedded_hal_blocking_spi_Transfer"],[8,"_embedded_hal_blocking_spi_Write"],[8,"_embedded_hal_serial_Read"],[8,"_embedded_hal_serial_Write"],[8,"_embedded_hal_spi_FullDuplex"],[8,"_embedded_hal_timer_CountDown"],[8,"_embedded_hal_blocking_delay_DelayMs"],[8,"_embedded_hal_blocking_delay_DelayUs"],[8,"_embedded_hal_digital_OutputPin"],[4,"Fpca"],[4,"Spsel"],[4,"Npriv"],[3,"Control"],[4,"Faultmask"],[4,"Primask"]]},\
"cortex_m_rtic_macros":{"doc":"","t":[23],"n":["app"],"q":["cortex_m_rtic_macros"],"d":["Attribute used to declare a RTIC application"],"i":[0],"f":[null],"p":[]},\
"embedded_hal":{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":[16,8,0,0,0,10,10,0,10,10,0,0,10,0,0,0,0,0,0,0,0,8,8,10,10,8,16,16,16,16,16,16,16,4,8,13,6,6,8,8,8,13,8,8,8,11,11,11,10,10,11,11,11,11,10,11,11,11,10,10,10,10,16,8,10,10,0,8,16,16,16,4,8,8,13,8,13,11,11,11,10,11,11,11,11,0,10,11,11,11,0,10,8,8,0,0,0,0,8,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,16,13,13,8,4,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,16,16,8,8,10,10,10,11,13,13,16,8,13,13,17,17,17,17,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,11,11,11,11,11,11,11,11,11,8,8,16,8,16,10,10,10],"n":["Duty","PwmPin","adc","blocking","digital","disable","enable","fmt","get_duty","get_max_duty","prelude","serial","set_duty","spi","timer","watchdog","delay","i2c","rng","serial","spi","DelayMs","DelayUs","delay_ms","delay_us","AddressMode","Error","Error","Error","Error","Error","Error","Error","Operation","Read","Read","SevenBitAddress","TenBitAddress","Transactional","TransactionalIter","Write","Write","WriteIter","WriteIterRead","WriteRead","borrow","borrow_mut","eq","exec","exec_iter","fmt","from","into","ne","read","try_from","try_into","type_id","write","write","write_iter_read","write_read","Error","Write","bflush","bwrite_all","write","Default","Error","Error","Error","Operation","Transactional","Transfer","Transfer","Write","Write","borrow","borrow_mut","eq","exec","fmt","from","into","ne","transfer","transfer","try_from","try_into","type_id","write","write","Default","Default","v1","v1_compat","v2","v2_compat","OutputPin","set_high","set_low","OldOutputPin","borrow","borrow_mut","from","from","into","new","set_high","set_high","set_low","set_low","try_from","try_into","type_id","Error","High","Low","OutputPin","PinState","borrow","borrow_mut","clone","eq","fmt","from","from","into","not","set_high","set_low","set_state","try_from","try_into","type_id","Error","Error","Read","Write","flush","read","write","write_str","CaptureOnFirstTransition","CaptureOnSecondTransition","Error","FullDuplex","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","Phase","Polarity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","eq","eq","eq","from","from","from","into","into","into","ne","phase","polarity","read","send","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Cancel","CountDown","Error","Periodic","Time","cancel","start","wait"],"q":["embedded_hal","","","","","","","","","","","","","","","","embedded_hal::blocking","","","","","embedded_hal::blocking::delay","","","","embedded_hal::blocking::i2c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_hal::blocking::serial","","","","","embedded_hal::blocking::serial::write","embedded_hal::blocking::spi","","","","","","","","","","","","","","","","","","","","","","","","embedded_hal::blocking::spi::transfer","embedded_hal::blocking::spi::write","embedded_hal::digital","","","","embedded_hal::digital::v1","","","embedded_hal::digital::v1_compat","","","","","","","","","","","","","","embedded_hal::digital::v2","","","","","","","","","","","","","","","","","","","","embedded_hal::serial","","","","","","","","embedded_hal::spi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_hal::timer","","","","","","",""],"d":["Type for the <code>duty</code> methods","A single PWM channel / pin","Analog-digital conversion traits","Blocking API","Digital I/O","Disables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","Implementation of <code>core::fmt::Write</code> for the HAL’s …","Returns the current duty cycle","Returns the maximum duty cycle value","The prelude is a collection of all the traits in this …","Serial interface","Sets a new duty cycle","Serial Peripheral Interface","Timers","Traits for interactions with a processors watchdog timer.","Delays","Blocking I2C API","Blocking hardware random number generator","Blocking serial API","Blocking SPI API","Millisecond delay","Microsecond delay","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Address mode (7-bit / 10-bit)","Error type","Error type","Error type","Error type","Error type","Error type","Error type","Transactional I2C operation.","Blocking read","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Transactional I2C interface.","Transactional I2C interface (iterator version).","Blocking write","Write data from the provided buffer","Blocking write (iterator version)","Blocking write (iterator version) + read","Blocking write + read","","","","Execute the provided operations on the I2C bus.","Execute the provided operations on the I2C bus (iterator …","","","","","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Writes bytes to slave with address <code>address</code> and then reads …","The type of error that can occur when writing","Write half of a serial interface (blocking variant)","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Blocking serial write","Marker trait to opt into default blocking write …","Error type","Error type","Associated error type","Operation for transactional SPI trait","Transactional trait allows multiple actions to be executed…","Blocking transfer","Write data out while reading data into the provided buffer","Blocking write","Write data from the provided buffer, discarding read data","","","","Execute the provided transactions","","","","","Blocking transfer","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","","","","Blocking write","Sends <code>words</code> to the slave, ignoring all the incoming words","Default implementation of <code>blocking::spi::Transfer<W></code> for …","Default implementation of <code>blocking::spi::Write<W></code> for …","Digital I/O","v1 compatibility wrappers","Digital I/O","v2 compatibility shims","Single digital push-pull output pin","Drives the pin high","Drives the pin low","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","","","","","","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","","","","","","","","Error type","High pin state","Low pin state","Single digital push-pull output pin","Digital output pin state","","","","","","","","","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","","","","Read error","Write error","Read half of a serial interface","Write half of a serial interface","Ensures that none of the previously written words are …","Reads a single word from the serial interface","Writes a single word to the serial interface","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An enumeration of SPI errors","Full duplex (master mode)","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Clock phase","Clock polarity","","","","","","","","","","","","","","","","","","","","Clock phase","Clock polarity","Reads the word stored in the shift register","Sends a word to the slave","","","","","","","","","","Trait for cancelable countdowns.","A count down timer","Error returned when a countdown can’t be canceled.","Marker trait that indicates that a timer is periodic","The unit of time used by this timer","Tries to cancel this countdown.","Starts a new count down","Non-blockingly “waits” until the count down finishes"],"i":[1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,2,3,0,4,5,6,7,8,9,10,0,0,11,0,0,0,0,0,11,0,0,0,11,11,11,9,10,11,11,11,11,4,11,11,11,5,6,8,7,12,0,12,12,0,0,13,14,15,0,0,0,16,0,16,16,16,16,15,16,16,16,16,0,13,16,16,16,0,14,0,0,0,0,0,0,0,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,20,0,0,20,20,20,20,20,20,20,20,20,19,19,19,20,20,20,21,22,0,0,22,21,22,22,23,23,24,0,25,25,0,0,0,0,0,0,0,25,23,26,25,23,26,25,23,26,25,23,26,25,23,26,25,23,26,26,26,26,24,24,25,23,26,25,23,26,25,23,26,0,0,27,0,28,27,28,28],"f":[null,null,null,null,null,[[]],[[]],null,[[]],[[]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["operation",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["operation",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["operation",4]],["bool",15]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["operation",4]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["pinstate",4]],[[["pinstate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["pinstate",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["polarity",4]],[[],["phase",4]],[[],["mode",3]],[[["polarity",4]],["bool",15]],[[["phase",4]],["bool",15]],[[["mode",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mode",3]],["bool",15]],null,null,[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["result",4]],[[]],[[],[["void",4],["result",6]]]],"p":[[8,"PwmPin"],[8,"DelayMs"],[8,"DelayUs"],[8,"Read"],[8,"Write"],[8,"WriteIter"],[8,"WriteRead"],[8,"WriteIterRead"],[8,"Transactional"],[8,"TransactionalIter"],[4,"Operation"],[8,"Write"],[8,"Transfer"],[8,"Write"],[8,"Transactional"],[4,"Operation"],[8,"OutputPin"],[3,"OldOutputPin"],[8,"OutputPin"],[4,"PinState"],[8,"Read"],[8,"Write"],[4,"Phase"],[8,"FullDuplex"],[4,"Polarity"],[3,"Mode"],[8,"Cancel"],[8,"CountDown"]]},\
"embedded_time":{"doc":"<code>embedded-time</code> provides a comprehensive library of <code>Duration</code>…","tn":["Clock","ConversionError","ConversionFailure","ConversionFailure","DivByZero","DivByZero","Instant","NegDuration","NegDuration","Overflow","Overflow","TimeError","TimeInt","Unspecified","Unspecified","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div_fraction","checked_div_fraction","checked_duration_since","checked_duration_until","checked_mul_fraction","checked_mul_fraction","checked_sub","clock","clone","cmp","default","default","duration","duration_since_epoch","eq","eq","eq","fixed_point","fmt","fmt","fmt","fraction","from","from","from","from","from","hash","hash","hash","into","into","into","ne","new","partial_cmp","rate","sub","sub","timer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Clock","Error","NotRunning","SCALING_FACTOR","T","Unspecified","borrow","borrow_mut","default","eq","fmt","from","hash","into","new_timer","try_from","try_into","try_now","type_id","0","0","0","0","0","0","Duration","Extensions","Generic","Hours","Microseconds","Milliseconds","Minutes","Nanoseconds","Seconds","add","add","add","add","add","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","div","div","div","div","div","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hours","hours","integer","integer","integer","integer","integer","integer","integer","into","into","into","into","into","into","into","microseconds","microseconds","milliseconds","milliseconds","minutes","minutes","mul","mul","mul","mul","mul","mul","nanoseconds","nanoseconds","new","new","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","scaling_factor","seconds","seconds","sub","sub","sub","sub","sub","sub","to_generic","to_rate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FixedPoint","SCALING_FACTOR","T","checked_div","checked_mul","integer","max_value","min_value","Fraction","borrow","borrow_mut","checked_div","checked_mul","clone","cmp","default","denominator","div","eq","fmt","from","from_integer","hash","into","mul","ne","new","new_reduce","numerator","partial_cmp","recip","to_integer","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Baud","Bd","Bd","BitsPerSecond","Bps","Bps","BytesPerSecond","Centihertz","Decihertz","Extensions","Generic","Hertz","Hz","Hz","KiBd","KiBd","KiBps","KiBps","KiHz","KiHz","Kibibaud","KibibitsPerSecond","KibibytesPerSecond","Kibihertz","Kibps","Kibps","Kilobaud","KilobitsPerSecond","KilobytesPerSecond","Kilohertz","MBd","MBd","MBps","MBps","MHz","MHz","Mbps","Mbps","Mebibaud","MebibitsPerSecond","MebibytesPerSecond","Mebihertz","Megabaud","MegabitsPerSecond","MegabytesPerSecond","Megahertz","MiBd","MiBd","MiBps","MiBps","MiHz","MiHz","Mibps","Mibps","Microhertz","Millihertz","Rate","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bps","bps","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","integer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kBd","kBd","kBps","kBps","kHz","kHz","kbps","kbps","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","scaling_factor","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_duration","to_generic","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Timer","borrow","borrow_mut","elapsed","fmt","from","hash","into","into_oneshot","into_periodic","is_expired","new","param","period_complete","remaining","start","try_from","try_into","type_id","wait","wait","Armed","None","OneShot","Periodic","Running","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["embedded_time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_time::clock","","","","","","","","","","","","","","","","","","","embedded_time::durationembedded_time::fixed_point","","","","","","","","embedded_time::fraction","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_time::rateembedded_time::timer","","","","","","","","","","","","","","","","","","","","","embedded_time::timer::param","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["[<code>Clock</code>]-implementation-specific error","Conversion errors","Attempted type conversion failed","Attempted type conversion failed","Attempted to divide by zero","Attempted to divide by zero","Represents an instant of time relative to a specific <code>Clock</code>","Resulting <code>Duration</code> is negative (not allowed)","Resulting <code>Duration</code> is negative (not allowed)","Result is outside of those valid for this type","Result is outside of those valid for this type","Crate errors","The core inner-type trait for time-related types","Exact cause of failure is unknown","Exact cause of failure is unknown","Add a [<code>Duration</code>] to an <code>Instant</code> resulting in a new, later …","","","","","","","This <code>Instant</code> + [<code>Duration</code>] = later (future) <code>Instant</code>","Checked integer / [<code>Fraction</code>] = integer","Checked integer / [<code>Fraction</code>] = integer","Returns the amount of time elapsed from another instant …","Returns the amount of time elapsed from self until that …","Checked integer × [<code>Fraction</code>] = integer","Checked integer × [<code>Fraction</code>] = integer","This <code>Instant</code> - [<code>Duration</code>] = earlier <code>Instant</code>","Abstraction for hardware timers/clocks","","","","","Duration types/units","Returns the [<code>Duration</code>] (in the provided units) since the …","","","","Fixed-point values","","","","Fractional/Rational values","","","","","","","","","","","","","Construct a new Instant from the provided <code>Clock</code>","Calculates the difference between two <code>Instant</code>s resulting …","Rate-based types/units","Subtract a two <code>Instant</code>s resulting in a <code>Duration</code>","Subtract a [<code>Duration</code>] from an <code>Instant</code> resulting in a new, …","Software timers coupled to a [crate::Clock] implementation","","","","","","","","","","The <code>Clock</code> trait provides an abstraction for …","Potential <code>Clock</code> errors","The clock has either stopped or never started","The duration of one clock tick in seconds, AKA the clock …","The type to hold the tick count","Exact cause of failure is unknown","","","","","","","","","Spawn a new, <code>OneShot</code> [<code>Timer</code>] from this clock","","","Get the current Instant","","","","","","","","An unsigned, fixed-point duration type","Create duration-based extensions from primitive numeric …","The <code>Generic</code> <code>Duration</code> type allows an arbitrary <em>scaling …","A duration unit type","A duration unit type","A duration unit type","A duration unit type","A duration unit type","A duration unit type","See Add/Sub","","","See Add/Sub","See Add/Sub","","","See Add/Sub","","See Add/Sub","See Add/Sub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","","See Formatting","","See Formatting","","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","","","","","","","","hours","hours","Returns the <em>integer</em> part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","","","","","","","","microseconds","microseconds","milliseconds","milliseconds","minutes","minutes","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","nanoseconds","nanoseconds","Constructs a new fixed-point <code>Generic</code> <code>Duration</code> value","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","Returns the <em>scaling factor</em> [<code>Fraction</code>] part","seconds","seconds","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","Construct a <code>Generic</code> <code>Duration</code> from a <em>named</em> <code>Duration</code> (eg. […","Convert to <em>named</em> <code>Rate</code>","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting from a <code>Generic</code> <code>Duration</code>","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","","See Converting from a <code>Generic</code> <code>Duration</code>","","","","","","","","","","","","","","","Fixed-point value type","The fractional <em>scaling factor</em>","The <em>integer</em> (magnitude) type","Multiply with overflow checking","Multiply with overflow checking","Returns the integer part of the <code>FixedPoint</code> value","Returns the maximum integer value","Returns the minimum integer value","A fractional value","","","Checked <code>Fraction</code> / <code>Fraction</code> = <code>Fraction</code>","Checked <code>Fraction</code> × <code>Fraction</code> = <code>Fraction</code>","","","","Return the denominator of the fraction","Panicky <code>Fraction</code> / <code>Fraction</code> = <code>Fraction</code>","","","","Constructs a <code>Fraction</code> from an integer.","","","Panicky <code>Fraction</code> × <code>Fraction</code> = <code>Fraction</code>","","Construct a new <code>Fraction</code>.","Construct a new <code>Fraction</code>.","Return the numerator of the fraction","","Returns the reciprocal of the fraction","Returns the value truncated to an integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","Baud","baud","baud","Bits/s","bytes per second","bytes per second","Bytes/s","Hertz / 100","Hertz / 10","Create rate-based extensions from primitive numeric types.","The <code>Generic</code> <code>Rate</code> type allows an arbitrary <em>scaling factor</em> …","Hertz","hertz","hertz","kibibaud","kibibaud","kibibytes per second","kibibytes per second","kibihertz","kibihertz","Baud × 1,024","Bits/s × 1,024","Bytes/s × 1,024","Hertz × 1,024","kibibits per second","kibibits per second","Baud × 1,000","Bits/s × 1,000","Bytes/s × 1,000","Hertz × 1,000","megabaud","megabaud","megabytes per second","megabytes per second","megahertz","megahertz","megabits per second","megabits per second","Baud × 1,048,576","Bits/s × 1,048,576","Bytes/s × 1,048,576","Hertz × 1,048,576","Baud × 1,000,000","Bits/s × 1,000,000","Bytes/s × 1,000,000","Hertz × 1,000,000","mebibaud","mebibaud","mebibytes per second","mebibytes per second","mebihertz","mebihertz","mebibits per second","mebibits per second","Hertz / 1,000,000","Hertz / 1000","An unsigned, fixed-point rate type","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bits per second","bits per second","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","","","See Formatting","See Formatting","","","See Formatting","","See Formatting","","See Formatting","","See Formatting","See Formatting","","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","See Formatting","See Formatting","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","","See Formatting","See Formatting","","See Formatting","","","See Formatting","","See Formatting","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","See Converting to a <code>Generic</code> <code>Rate</code>","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <em>integer</em> part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","","","","","","","","","","","","","","","","","","","","","","","","","","kilobaud","kilobaud","kiloBytes per second","kiloBytes per second","kilohertz","kilohertz","kilobits per second","kilobits per second","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","","Constructs a new fixed-point <code>Generic</code> <code>Rate</code> value","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","See Constructing a rate","","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","Returns the <em>scaling factor</em> [<code>Fraction</code>] part","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","Convert to <em>named</em> <code>Duration</code>","Construct a <code>Generic</code> <code>Rate</code> from a <em>named</em> <code>Rate</code> (eg. [<code>Kilohertz</code>…","","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting from a <code>Generic</code> <code>Rate</code>","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","See Converting between <code>Rate</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Timer</code> counts toward an expiration, can be polled for …","","","Returns the [<code>Duration</code>] of time elapsed since it was …","","","","","Change timer type to one-shot","Change timer type into periodic","Check whether the timer has expired","Construct a new, <code>OneShot</code> <code>Timer</code>","Timer type/state parameters","Check whether a <em>periodic</em> timer has elapsed","Returns the [<code>Duration</code>] until the expiration of the timer","Start the timer from this instant","","","","Block until the timer has expired","Block until the timer has expired","Timer is ready to start","Parameter not set","Timer will stop when it expires","Timer will automatically restart when it expires","Timer is running","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,2,1,2,0,1,2,1,2,0,0,1,2,3,3,1,2,3,1,2,3,4,4,3,3,4,4,3,0,3,3,1,2,0,3,3,1,2,0,3,1,2,0,3,1,1,1,2,3,1,2,3,1,2,1,3,3,0,3,3,0,3,1,2,3,1,2,3,1,2,0,0,5,6,6,5,5,5,5,5,5,5,5,5,6,5,5,6,5,7,8,9,10,11,12,0,0,0,0,0,0,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,7,8,9,10,11,12,13,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,7,7,8,8,9,9,10,10,11,11,12,12,13,13,13,13,13,13,13,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,7,8,9,10,11,12,14,14,13,7,8,9,10,11,12,13,7,8,9,10,11,12,14,14,14,14,14,14,7,8,9,10,11,12,14,14,13,7,7,8,8,9,9,10,10,11,11,12,12,13,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,7,8,9,10,11,12,13,14,14,7,8,9,10,11,12,15,15,13,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,0,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,42,42,0,42,42,0,0,0,0,0,0,42,42,42,42,42,42,42,42,0,0,0,0,42,42,0,0,0,0,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,0,0,0,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,42,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,22,22,22,22,22,22,23,23,24,24,25,25,26,26,27,27,27,27,27,27,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,41,41,43,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,41,41,41,41,41,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,42,42,42,42,42,42,42,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,43,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,43,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,22,22,22,22,22,22,23,23,24,24,25,25,26,26,27,27,27,27,27,27,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,41,41,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,44,43,18,18,18,18,18,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,45,45,45,45,45,0,0,0,0,0,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["duration",8]],["option",4]],[[["fraction",3]],["option",4]],[[["fraction",3]],["option",4]],[[],[["generic",3],["option",4]]],[[],[["generic",3],["option",4]]],[[["fraction",3]],["option",4]],[[["fraction",3]],["option",4]],[[["duration",8]],["option",4]],null,[[]],[[],["ordering",4]],[[]],[[]],null,[[],["generic",3]],[[],["bool",15]],[[["timeerror",4]],["bool",15]],[[["conversionerror",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[["error",4]]],[[["conversionerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["timeerror",4]],["bool",15]],[[]],[[],[["option",4],["ordering",4]]],null,[[["instant",3]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["duration",8]],[["timer",3],["oneshot",3],["duration",8],["armed",3]]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["instant",3],["error",4]]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["instant",3]]],[[["instant",3]]],[[]],[[]],[[["instant",3]]],[[["instant",3]]],[[]],[[["instant",3]]],[[]],[[]],[[["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["generic",3]],[[],["hours",3]],[[],["minutes",3]],[[],["seconds",3]],[[],["milliseconds",3]],[[],["microseconds",3]],[[],["nanoseconds",3]],[[["generic",3]],["ordering",4]],[[["hours",3]],["ordering",4]],[[["minutes",3]],["ordering",4]],[[["seconds",3]],["ordering",4]],[[["milliseconds",3]],["ordering",4]],[[["microseconds",3]],["ordering",4]],[[["nanoseconds",3]],["ordering",4]],[[],["generic",3]],[[],["hours",3]],[[],["minutes",3]],[[],["seconds",3]],[[],["milliseconds",3]],[[],["microseconds",3]],[[],["nanoseconds",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["generic",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["nanoseconds",3]]],[[["microseconds",3]]],[[["milliseconds",3]]],[[["hours",3]]],[[["seconds",3]]],[[["minutes",3]]],[[["milliseconds",3]]],[[["minutes",3]]],[[["seconds",3]]],[[]],[[["u32",15],["seconds",3]]],[[["u32",15],["milliseconds",3]]],[[["microseconds",3]]],[[["duration",3]]],[[["microseconds",3],["u32",15]]],[[["nanoseconds",3]]],[[["nanoseconds",3],["u32",15]]],[[["minutes",3],["u32",15]]],[[["u32",15],["hours",3]]],[[["u32",15],["seconds",3]]],[[["milliseconds",3]]],[[["u32",15],["milliseconds",3]]],[[["microseconds",3]]],[[["microseconds",3],["u32",15]]],[[["nanoseconds",3]]],[[["nanoseconds",3],["u32",15]]],[[["duration",3]]],[[["u32",15],["hours",3]]],[[["minutes",3],["u32",15]]],[[["seconds",3]]],[[]],[[]],[[["u32",15],["milliseconds",3]]],[[["nanoseconds",3],["u32",15]]],[[["microseconds",3],["u32",15]]],[[["minutes",3],["u32",15]]],[[["u32",15],["seconds",3]]],[[["u32",15],["hours",3]]],[[["microseconds",3]]],[[["nanoseconds",3]]],[[["duration",3]]],[[["milliseconds",3]]],[[["u32",15],["milliseconds",3]]],[[["microseconds",3]]],[[]],[[["u32",15],["hours",3]]],[[["nanoseconds",3],["u32",15]]],[[["nanoseconds",3]]],[[["microseconds",3],["u32",15]]],[[["u32",15],["seconds",3]]],[[["minutes",3],["u32",15]]],[[["nanoseconds",3]]],[[["nanoseconds",3],["u32",15]]],[[["u32",15],["milliseconds",3]]],[[["u32",15],["seconds",3]]],[[["microseconds",3],["u32",15]]],[[]],[[["minutes",3],["u32",15]]],[[["u32",15],["hours",3]]],[[["u32",15],["hours",3]]],[[["microseconds",3],["u32",15]]],[[["nanoseconds",3],["u32",15]]],[[["minutes",3],["u32",15]]],[[["u32",15],["seconds",3]]],[[]],[[["u32",15],["milliseconds",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hours",3]],[[],["hours",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["microseconds",3]],[[],["microseconds",3]],[[],["milliseconds",3]],[[],["milliseconds",3]],[[],["minutes",3]],[[],["minutes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nanoseconds",3]],[[],["nanoseconds",3]],[[["fraction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["generic",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["hours",3]],[["option",4],["ordering",4]]],[[["nanoseconds",3]],[["option",4],["ordering",4]]],[[["microseconds",3]],[["option",4],["ordering",4]]],[[["minutes",3]],[["option",4],["ordering",4]]],[[["milliseconds",3]],[["option",4],["ordering",4]]],[[["seconds",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fraction",3]],[[],["seconds",3]],[[],["seconds",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fraction",3]],[["generic",3],["conversionerror",4],["result",4]]],[[],[["rate",8],["conversionerror",4],["result",4]]],[[],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["duration",3]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[],["result",4]],[[["hours",3]],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["duration",3]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["minutes",3]],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[["duration",3]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["hours",3]],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[["seconds",3]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["minutes",3]],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["duration",3]],["result",4]],[[["generic",3]],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["hours",3]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["milliseconds",3]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[["duration",3]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[["seconds",3]],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["minutes",3]],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["hours",3]],["result",4]],[[["microseconds",3],["u64",15]],["result",4]],[[["seconds",3],["u64",15]],["result",4]],[[["minutes",3]],["result",4]],[[["minutes",3],["u64",15]],["result",4]],[[["hours",3]],["result",4]],[[["hours",3],["u64",15]],["result",4]],[[["nanoseconds",3],["u64",15]],["result",4]],[[["u64",15],["milliseconds",3]],["result",4]],[[["milliseconds",3]],["result",4]],[[["microseconds",3]],["result",4]],[[["duration",3]],["result",4]],[[["seconds",3]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["fraction",3]],[[["fraction",3]],["ordering",4]],[[]],[[],["u32",15]],[[]],[[["fraction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[["fraction",3]],["bool",15]],[[["u32",15]]],[[["u32",15]],[["conversionerror",4],["result",4]]],[[],["u32",15]],[[["fraction",3]],[["ordering",4],["option",4]]],[[]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["baud",3]],[[],["baud",3]],null,[[],["bytespersecond",3]],[[],["bytespersecond",3]],null,null,null,null,null,null,[[],["hertz",3]],[[],["hertz",3]],[[],["kibibaud",3]],[[],["kibibaud",3]],[[],["kibibytespersecond",3]],[[],["kibibytespersecond",3]],[[],["kibihertz",3]],[[],["kibihertz",3]],null,null,null,null,[[],["kibibitspersecond",3]],[[],["kibibitspersecond",3]],null,null,null,null,[[],["megabaud",3]],[[],["megabaud",3]],[[],["megabytespersecond",3]],[[],["megabytespersecond",3]],[[],["megahertz",3]],[[],["megahertz",3]],[[],["megabitspersecond",3]],[[],["megabitspersecond",3]],null,null,null,null,null,null,null,null,[[],["mebibaud",3]],[[],["mebibaud",3]],[[],["mebibytespersecond",3]],[[],["mebibytespersecond",3]],[[],["mebihertz",3]],[[],["mebihertz",3]],[[],["mebibitspersecond",3]],[[],["mebibitspersecond",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitspersecond",3]],[[],["bitspersecond",3]],[[],["generic",3]],[[],["mebihertz",3]],[[],["megahertz",3]],[[],["kibihertz",3]],[[],["kilohertz",3]],[[],["hertz",3]],[[],["decihertz",3]],[[],["centihertz",3]],[[],["millihertz",3]],[[],["microhertz",3]],[[],["mebibytespersecond",3]],[[],["megabytespersecond",3]],[[],["kibibytespersecond",3]],[[],["kilobytespersecond",3]],[[],["bytespersecond",3]],[[],["mebibitspersecond",3]],[[],["megabitspersecond",3]],[[],["kibibitspersecond",3]],[[],["kilobitspersecond",3]],[[],["bitspersecond",3]],[[],["mebibaud",3]],[[],["megabaud",3]],[[],["kibibaud",3]],[[],["kilobaud",3]],[[],["baud",3]],[[["generic",3]],["ordering",4]],[[["mebihertz",3]],["ordering",4]],[[["megahertz",3]],["ordering",4]],[[["kibihertz",3]],["ordering",4]],[[["kilohertz",3]],["ordering",4]],[[["hertz",3]],["ordering",4]],[[["decihertz",3]],["ordering",4]],[[["centihertz",3]],["ordering",4]],[[["millihertz",3]],["ordering",4]],[[["microhertz",3]],["ordering",4]],[[["mebibytespersecond",3]],["ordering",4]],[[["megabytespersecond",3]],["ordering",4]],[[["kibibytespersecond",3]],["ordering",4]],[[["kilobytespersecond",3]],["ordering",4]],[[["bytespersecond",3]],["ordering",4]],[[["mebibitspersecond",3]],["ordering",4]],[[["megabitspersecond",3]],["ordering",4]],[[["kibibitspersecond",3]],["ordering",4]],[[["kilobitspersecond",3]],["ordering",4]],[[["bitspersecond",3]],["ordering",4]],[[["mebibaud",3]],["ordering",4]],[[["megabaud",3]],["ordering",4]],[[["kibibaud",3]],["ordering",4]],[[["kilobaud",3]],["ordering",4]],[[["baud",3]],["ordering",4]],[[],["generic",3]],[[],["mebihertz",3]],[[],["megahertz",3]],[[],["kibihertz",3]],[[],["kilohertz",3]],[[],["hertz",3]],[[],["decihertz",3]],[[],["centihertz",3]],[[],["millihertz",3]],[[],["microhertz",3]],[[],["mebibytespersecond",3]],[[],["megabytespersecond",3]],[[],["kibibytespersecond",3]],[[],["kilobytespersecond",3]],[[],["bytespersecond",3]],[[],["mebibitspersecond",3]],[[],["megabitspersecond",3]],[[],["kibibitspersecond",3]],[[],["kilobitspersecond",3]],[[],["bitspersecond",3]],[[],["mebibaud",3]],[[],["megabaud",3]],[[],["kibibaud",3]],[[],["kilobaud",3]],[[],["baud",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["generic",3]],["bool",15]],[[["mebihertz",3]],["bool",15]],[[["kibihertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["kilohertz",3]],["bool",15]],[[["megahertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["mebihertz",3]],["bool",15]],[[["kibihertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["megahertz",3]],["bool",15]],[[["kilohertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["microhertz",3]],["bool",15]],[[["decihertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["kibihertz",3]],["bool",15]],[[["millihertz",3]],["bool",15]],[[["megahertz",3]],["bool",15]],[[["mebihertz",3]],["bool",15]],[[["centihertz",3]],["bool",15]],[[["kilohertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["decihertz",3]],["bool",15]],[[["centihertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["millihertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["hertz",3]],["bool",15]],[[["microhertz",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["mebibytespersecond",3]],["bool",15]],[[["megabitspersecond",3]],["bool",15]],[[["megabytespersecond",3]],["bool",15]],[[["kibibitspersecond",3]],["bool",15]],[[["kilobitspersecond",3]],["bool",15]],[[["bitspersecond",3]],["bool",15]],[[["kibibytespersecond",3]],["bool",15]],[[["kilobytespersecond",3]],["bool",15]],[[["bytespersecond",3]],["bool",15]],[[["mebibitspersecond",3]],["bool",15]],[[["mebibaud",3]],["bool",15]],[[["kibibaud",3]],["bool",15]],[[["baud",3]],["bool",15]],[[["baud",3]],["bool",15]],[[["kilobaud",3]],["bool",15]],[[["megabaud",3]],["bool",15]],[[["baud",3]],["bool",15]],[[["kibibaud",3]],["bool",15]],[[["mebibaud",3]],["bool",15]],[[["megabaud",3]],["bool",15]],[[["baud",3]],["bool",15]],[[["kilobaud",3]],["bool",15]],[[["mebibaud",3]],["bool",15]],[[["baud",3]],["bool",15]],[[["kilobaud",3]],["bool",15]],[[["megabaud",3]],["bool",15]],[[["kibibaud",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["kibibitspersecond",3]]],[[["hertz",3]]],[[["kilobaud",3]]],[[["baud",3]]],[[["megabaud",3]]],[[["mebibaud",3]]],[[["centihertz",3]]],[[["bitspersecond",3]]],[[]],[[["kilobitspersecond",3]]],[[["kibibaud",3]]],[[["megabitspersecond",3]]],[[["mebibitspersecond",3]]],[[["bytespersecond",3]]],[[["kilobytespersecond",3]]],[[["kibibytespersecond",3]]],[[["megabytespersecond",3]]],[[["mebibytespersecond",3]]],[[["microhertz",3]]],[[["millihertz",3]]],[[["mebihertz",3]]],[[["megahertz",3]]],[[["decihertz",3]]],[[["kibihertz",3]]],[[["kilohertz",3]]],[[]],[[["hertz",3]]],[[["u32",15],["hertz",3]]],[[["u32",15],["kibihertz",3]]],[[["kibihertz",3]]],[[["u32",15],["mebihertz",3]]],[[]],[[["kilohertz",3]]],[[["megahertz",3],["u32",15]]],[[["u32",15],["hertz",3]]],[[["hertz",3]]],[[["kilohertz",3],["u32",15]]],[[]],[[["u32",15],["mebihertz",3]]],[[["u32",15],["hertz",3]]],[[["u32",15],["kibihertz",3]]],[[["hertz",3]]],[[["u32",15],["hertz",3]]],[[["hertz",3]]],[[["kilohertz",3],["u32",15]]],[[]],[[["megahertz",3],["u32",15]]],[[["kilohertz",3],["u32",15]]],[[["u32",15],["kibihertz",3]]],[[["u32",15],["centihertz",3]]],[[["megahertz",3],["u32",15]]],[[]],[[["u32",15],["microhertz",3]]],[[["decihertz",3],["u32",15]]],[[["millihertz",3],["u32",15]]],[[["u32",15],["mebihertz",3]]],[[["u32",15],["hertz",3]]],[[["decihertz",3],["u32",15]]],[[]],[[["u32",15],["hertz",3]]],[[["hertz",3]]],[[["u32",15],["centihertz",3]]],[[]],[[["hertz",3]]],[[["u32",15],["hertz",3]]],[[]],[[["millihertz",3],["u32",15]]],[[["hertz",3]]],[[["u32",15],["hertz",3]]],[[]],[[["u32",15],["microhertz",3]]],[[["hertz",3]]],[[["u32",15],["hertz",3]]],[[["bytespersecond",3]]],[[]],[[["u32",15],["mebibytespersecond",3]]],[[["mebibitspersecond",3]]],[[["mebibitspersecond",3],["u32",15]]],[[["kibibytespersecond",3]]],[[["kibibytespersecond",3],["u32",15]]],[[["kibibitspersecond",3]]],[[["kibibitspersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["bitspersecond",3]]],[[["u32",15],["bitspersecond",3]]],[[["megabitspersecond",3]]],[[]],[[["u32",15],["bitspersecond",3]]],[[["bitspersecond",3]]],[[["bytespersecond",3],["u32",15]]],[[["bytespersecond",3]]],[[["u32",15],["kilobitspersecond",3]]],[[["kilobitspersecond",3]]],[[["kilobytespersecond",3],["u32",15]]],[[["kilobytespersecond",3]]],[[["megabitspersecond",3],["u32",15]]],[[["megabytespersecond",3],["u32",15]]],[[["kibibitspersecond",3],["u32",15]]],[[]],[[["kibibitspersecond",3]]],[[["kibibytespersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["mebibitspersecond",3],["u32",15]]],[[["u32",15],["mebibytespersecond",3]]],[[["bitspersecond",3]]],[[["bytespersecond",3]]],[[["u32",15],["bitspersecond",3]]],[[["bytespersecond",3]]],[[["kilobitspersecond",3]]],[[["kilobytespersecond",3],["u32",15]]],[[["megabytespersecond",3],["u32",15]]],[[["u32",15],["bitspersecond",3]]],[[["megabitspersecond",3],["u32",15]]],[[]],[[["u32",15],["kilobitspersecond",3]]],[[["bytespersecond",3],["u32",15]]],[[["bitspersecond",3]]],[[["bytespersecond",3],["u32",15]]],[[["u32",15],["mebibytespersecond",3]]],[[["mebibitspersecond",3],["u32",15]]],[[["kilobytespersecond",3],["u32",15]]],[[["u32",15],["kilobitspersecond",3]]],[[["megabitspersecond",3],["u32",15]]],[[]],[[["megabytespersecond",3],["u32",15]]],[[["u32",15],["bitspersecond",3]]],[[["kibibytespersecond",3],["u32",15]]],[[["kibibitspersecond",3],["u32",15]]],[[["bitspersecond",3]]],[[["kibibytespersecond",3]]],[[]],[[["u32",15],["mebibytespersecond",3]]],[[["u32",15],["bitspersecond",3]]],[[["bitspersecond",3]]],[[["bytespersecond",3],["u32",15]]],[[["bytespersecond",3]]],[[["kibibitspersecond",3],["u32",15]]],[[["kibibitspersecond",3]]],[[["kibibytespersecond",3],["u32",15]]],[[["mebibitspersecond",3],["u32",15]]],[[["megabytespersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["u32",15],["kilobitspersecond",3]]],[[["bitspersecond",3]]],[[["kilobitspersecond",3]]],[[["bytespersecond",3]]],[[["kilobytespersecond",3],["u32",15]]],[[["kilobytespersecond",3]]],[[["megabitspersecond",3],["u32",15]]],[[["u32",15],["bitspersecond",3]]],[[]],[[["bytespersecond",3]]],[[["mebibitspersecond",3],["u32",15]]],[[["kibibitspersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["bitspersecond",3]]],[[["u32",15],["bitspersecond",3]]],[[["u32",15],["mebibytespersecond",3]]],[[]],[[["kibibytespersecond",3],["u32",15]]],[[["megabitspersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["bitspersecond",3]]],[[["u32",15],["bitspersecond",3]]],[[["u32",15],["kilobitspersecond",3]]],[[["kilobytespersecond",3],["u32",15]]],[[["bytespersecond",3]]],[[]],[[["megabytespersecond",3],["u32",15]]],[[["u32",15],["bitspersecond",3]]],[[]],[[["kilobytespersecond",3],["u32",15]]],[[["mebibitspersecond",3],["u32",15]]],[[["megabytespersecond",3],["u32",15]]],[[["u32",15],["mebibytespersecond",3]]],[[["kibibitspersecond",3],["u32",15]]],[[["u32",15],["kilobitspersecond",3]]],[[["megabitspersecond",3],["u32",15]]],[[["bytespersecond",3],["u32",15]]],[[["kibibytespersecond",3],["u32",15]]],[[["kibibaud",3]]],[[["u32",15],["kibibaud",3]]],[[["mebibaud",3],["u32",15]]],[[]],[[["baud",3]]],[[["baud",3],["u32",15]]],[[]],[[["baud",3],["u32",15]]],[[["baud",3]]],[[["kilobaud",3],["u32",15]]],[[["kilobaud",3]]],[[["u32",15],["megabaud",3]]],[[["baud",3]]],[[["u32",15],["kibibaud",3]]],[[]],[[["mebibaud",3],["u32",15]]],[[["baud",3],["u32",15]]],[[]],[[["u32",15],["megabaud",3]]],[[["kilobaud",3],["u32",15]]],[[["baud",3],["u32",15]]],[[["baud",3]]],[[["u32",15],["kibibaud",3]]],[[["mebibaud",3],["u32",15]]],[[["u32",15],["megabaud",3]]],[[["kilobaud",3],["u32",15]]],[[["baud",3],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["kilobaud",3]],[[],["kilobaud",3]],[[],["kilobytespersecond",3]],[[],["kilobytespersecond",3]],[[],["kilohertz",3]],[[],["kilohertz",3]],[[],["kilobitspersecond",3]],[[],["kilobitspersecond",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["generic",3]],["bool",15]],[[["fraction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["generic",3]],[["ordering",4],["option",4]]],[[["mebihertz",3]],[["option",4],["ordering",4]]],[[["kibihertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["kilohertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["megahertz",3]],[["option",4],["ordering",4]]],[[["kibihertz",3]],[["option",4],["ordering",4]]],[[["mebihertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["megahertz",3]],[["option",4],["ordering",4]]],[[["kilohertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["millihertz",3]],[["option",4],["ordering",4]]],[[["centihertz",3]],[["option",4],["ordering",4]]],[[["decihertz",3]],[["option",4],["ordering",4]]],[[["mebihertz",3]],[["option",4],["ordering",4]]],[[["microhertz",3]],[["option",4],["ordering",4]]],[[["kibihertz",3]],[["option",4],["ordering",4]]],[[["megahertz",3]],[["option",4],["ordering",4]]],[[["kilohertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["decihertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["centihertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["millihertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["hertz",3]],[["option",4],["ordering",4]]],[[["microhertz",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["megabitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobytespersecond",3]],[["option",4],["ordering",4]]],[[["kilobitspersecond",3]],[["option",4],["ordering",4]]],[[["bytespersecond",3]],[["option",4],["ordering",4]]],[[["bitspersecond",3]],[["option",4],["ordering",4]]],[[["megabytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibytespersecond",3]],[["option",4],["ordering",4]]],[[["mebibitspersecond",3]],[["option",4],["ordering",4]]],[[["kibibitspersecond",3]],[["option",4],["ordering",4]]],[[["baud",3]],[["option",4],["ordering",4]]],[[["mebibaud",3]],[["option",4],["ordering",4]]],[[["kibibaud",3]],[["option",4],["ordering",4]]],[[["megabaud",3]],[["option",4],["ordering",4]]],[[["kilobaud",3]],[["option",4],["ordering",4]]],[[["baud",3]],[["option",4],["ordering",4]]],[[["mebibaud",3]],[["option",4],["ordering",4]]],[[["kibibaud",3]],[["option",4],["ordering",4]]],[[["baud",3]],[["option",4],["ordering",4]]],[[["baud",3]],[["option",4],["ordering",4]]],[[["megabaud",3]],[["option",4],["ordering",4]]],[[["kilobaud",3]],[["option",4],["ordering",4]]],[[["baud",3]],[["option",4],["ordering",4]]],[[["mebibaud",3]],[["option",4],["ordering",4]]],[[["kibibaud",3]],[["option",4],["ordering",4]]],[[["megabaud",3]],[["option",4],["ordering",4]]],[[["kilobaud",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fraction",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["conversionerror",4],["duration",8]]],[[["fraction",3]],[["generic",3],["conversionerror",4],["result",4]]],[[],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["mebihertz",3]],["result",4]],[[["kibihertz",3],["u64",15]],["result",4]],[[["kilohertz",3],["u64",15]],["result",4]],[[["megahertz",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["kibihertz",3],["u64",15]],["result",4]],[[["mebihertz",3]],["result",4]],[[["u64",15],["mebihertz",3]],["result",4]],[[["kilohertz",3],["u64",15]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["megahertz",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[["megahertz",3]],["result",4]],[[["kibihertz",3]],["result",4]],[[["kilohertz",3],["u64",15]],["result",4]],[[["mebihertz",3]],["result",4]],[[["kibihertz",3],["u64",15]],["result",4]],[[["microhertz",3],["u64",15]],["result",4]],[[["microhertz",3]],["result",4]],[[["megahertz",3]],["result",4]],[[["megahertz",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[["kilohertz",3]],["result",4]],[[["u64",15],["mebihertz",3]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["millihertz",3],["u64",15]],["result",4]],[[["millihertz",3]],["result",4]],[[["decihertz",3]],["result",4]],[[["decihertz",3],["u64",15]],["result",4]],[[["centihertz",3]],["result",4]],[[["centihertz",3],["u64",15]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["decihertz",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["centihertz",3],["u64",15]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[],["result",4]],[[["millihertz",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["microhertz",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["hertz",3],["u64",15]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["mebibytespersecond",3]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[["mebibitspersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["megabitspersecond",3]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[["megabytespersecond",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[["kilobytespersecond",3]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[["mebibytespersecond",3]],["result",4]],[[["kibibytespersecond",3]],["result",4]],[[["kibibitspersecond",3]],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["megabitspersecond",3]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[["mebibitspersecond",3]],["result",4]],[[["kilobitspersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["megabytespersecond",3]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["mebibytespersecond",3]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["megabytespersecond",3]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[],["result",4]],[[["kibibytespersecond",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[["mebibitspersecond",3]],["result",4]],[[],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["mebibytespersecond",3]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["megabitspersecond",3]],["result",4]],[[["megabytespersecond",3]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[["generic",3]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["kilobytespersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["kilobitspersecond",3],["u64",15]],["result",4]],[[["bitspersecond",3],["u64",15]],["result",4]],[[["mebibitspersecond",3]],["result",4]],[[["kibibytespersecond",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["mebibytespersecond",3]],["result",4]],[[],["result",4]],[[["u64",15],["megabitspersecond",3]],["result",4]],[[["megabitspersecond",3]],["result",4]],[[["mebibytespersecond",3]],["result",4]],[[["kilobytespersecond",3]],["result",4]],[[["u64",15],["kilobytespersecond",3]],["result",4]],[[["mebibitspersecond",3],["u64",15]],["result",4]],[[["u64",15],["megabytespersecond",3]],["result",4]],[[["kibibitspersecond",3]],["result",4]],[[["kilobitspersecond",3]],["result",4]],[[["kibibytespersecond",3]],["result",4]],[[["megabytespersecond",3]],["result",4]],[[["kibibitspersecond",3],["u64",15]],["result",4]],[[["bytespersecond",3]],["result",4]],[[["u64",15],["bytespersecond",3]],["result",4]],[[["generic",3]],["result",4]],[[["mebibaud",3],["u64",15]],["result",4]],[[],["result",4]],[[["baud",3],["u64",15]],["result",4]],[[["kibibaud",3],["u64",15]],["result",4]],[[],["result",4]],[[["baud",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["u64",15],["megabaud",3]],["result",4]],[[["kilobaud",3],["u64",15]],["result",4]],[[],["result",4]],[[["kibibaud",3],["u64",15]],["result",4]],[[["baud",3],["u64",15]],["result",4]],[[["mebibaud",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["mebibaud",3]],["result",4]],[[["kilobaud",3],["u64",15]],["result",4]],[[["u64",15],["megabaud",3]],["result",4]],[[["generic",3]],["result",4]],[[],["result",4]],[[["baud",3],["u64",15]],["result",4]],[[["megabaud",3]],["result",4]],[[["megabaud",3]],["result",4]],[[["kilobaud",3],["u64",15]],["result",4]],[[["generic",3]],["result",4]],[[["mebibaud",3]],["result",4]],[[["u64",15],["megabaud",3]],["result",4]],[[],["result",4]],[[["mebibaud",3],["u64",15]],["result",4]],[[["kibibaud",3]],["result",4]],[[["baud",3],["u64",15]],["result",4]],[[["kibibaud",3],["u64",15]],["result",4]],[[["kilobaud",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["result",4],["timeerror",4]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["timer",3],["oneshot",3]]],[[],[["periodic",3],["timer",3]]],[[],[["bool",15],["timeerror",4],["result",4]]],[[],[["armed",3],["oneshot",3],["timer",3]]],null,[[],[["bool",15],["timeerror",4],["result",4]]],[[],[["result",4],["timeerror",4]]],[[],[["result",4],["timer",3],["timeerror",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["result",4],["timer",3],["timeerror",4]]],[[],[["result",4],["timeerror",4]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"TimeError"],[4,"ConversionError"],[3,"Instant"],[8,"TimeInt"],[4,"Error"],[8,"Clock"],[3,"Hours"],[3,"Minutes"],[3,"Seconds"],[3,"Milliseconds"],[3,"Microseconds"],[3,"Nanoseconds"],[3,"Generic"],[8,"Extensions"],[8,"Duration"],[8,"FixedPoint"],[3,"Fraction"],[3,"Mebihertz"],[3,"Megahertz"],[3,"Kibihertz"],[3,"Kilohertz"],[3,"Hertz"],[3,"Decihertz"],[3,"Centihertz"],[3,"Millihertz"],[3,"Microhertz"],[3,"MebibytesPerSecond"],[3,"MegabytesPerSecond"],[3,"KibibytesPerSecond"],[3,"KilobytesPerSecond"],[3,"BytesPerSecond"],[3,"MebibitsPerSecond"],[3,"MegabitsPerSecond"],[3,"KibibitsPerSecond"],[3,"KilobitsPerSecond"],[3,"BitsPerSecond"],[3,"Mebibaud"],[3,"Megabaud"],[3,"Kibibaud"],[3,"Kilobaud"],[3,"Baud"],[8,"Extensions"],[3,"Generic"],[8,"Rate"],[3,"Timer"],[3,"None"],[3,"Armed"],[3,"Running"],[3,"Periodic"],[3,"OneShot"]]},\
"hash32":{"doc":"32-bit hashing machinery","t":[8,3,3,8,8,16,3,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["BuildHasher","BuildHasherDefault","FnvHasher","Hash","Hasher","Hasher","Murmur3Hasher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","default","default","default","eq","finish","finish","finish","fmt","from","from","from","hash","hash_slice","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write"],"q":["hash32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["See <code>core::hash::BuildHasher</code> for details","See <code>core::hash::BuildHasherDefault</code> for details","32-bit Fowler-Noll-Vo hasher","See <code>core::hash::Hash</code> for details","See <code>core::hash::Hasher</code> for details","See <code>core::hash::BuildHasher::Hasher</code>","32-bit MurmurHash3 hasher","","","","","","","See <code>core::hash::BuildHasher.build_hasher</code>","","","","","","","See <code>core::hash::Hasher.finish</code>","","","","","","","Feeds this value into the given <code>Hasher</code>.","Feeds a slice of this type into the given <code>Hasher</code>.","","","","<code>const</code> constructor","","","","","","","","","","See <code>core::hash::Hasher.write</code>","",""],"i":[0,0,0,0,0,1,0,2,3,4,2,3,4,1,4,4,2,3,4,4,5,2,3,4,2,3,4,6,6,2,3,4,4,2,3,4,2,3,4,2,3,4,5,2,3],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["buildhasherdefault",3]],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[8,"BuildHasher"],[3,"FnvHasher"],[3,"Murmur3Hasher"],[3,"BuildHasherDefault"],[8,"Hasher"],[8,"Hash"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","tn":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","ne","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry_with","replace_entry_with","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","default","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_sethashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the …","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the …","Creates an empty <code>HashMap<K, V, S, A></code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","Set the value of an entry with a custom hasher function.","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns…","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Removes a value from the set. Returns whether the value …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it …","Erases an element from the table without dropping it.","Searches for an element in the table.","","","","","","","Gets a reference to an element in the table.","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","","","","","","","","","","","","Returns an iterator which consumes all elements from the …","Returns an iterator over every element in the table. It …","","","Returns an iterator over occupied buckets that could …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","Attempts to insert a new element without growing the …","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least …","Attempts to allocate a new hash table using the given …","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,2,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,3,4,0,0,0,3,4,3,4,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,6,6,7,10,11,6,6,7,10,11,6,6,6,6,13,6,21,6,6,6,6,7,8,9,10,11,12,14,15,3,16,17,18,4,19,20,21,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,15,18,6,15,18,15,18,6,16,19,6,16,6,16,6,16,19,6,6,6,3,16,17,4,19,20,17,16,17,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,7,8,9,10,11,12,13,14,16,20,16,16,19,6,6,6,16,4,19,20,16,6,6,7,8,9,10,11,12,14,7,8,9,10,11,12,13,14,4,3,4,3,4,4,6,6,6,16,19,6,16,19,19,16,19,19,6,6,6,6,7,8,9,10,11,12,13,14,6,7,10,11,21,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,6,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,21,21,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,22,23,27,28,29,30,22,22,23,27,28,29,30,22,22,22,22,22,26,22,22,22,22,23,24,25,27,28,29,30,22,22,23,24,25,26,27,28,29,30,22,22,22,22,22,22,22,22,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,22,22,22,22,23,24,25,23,24,25,26,27,28,29,30,22,22,22,22,22,22,23,24,25,26,27,28,29,30,22,22,22,23,27,28,29,30,22,23,24,25,26,27,28,29,30,22,23,24,25,26,27,28,29,30,22,22,23,24,25,26,27,28,29,30,22,22,22,22,22,0,0,0,0,0,0,31,31,31,31,32,33,34,35,36,31,32,33,34,35,36,32,32,32,32,32,32,31,32,33,32,32,31,32,33,31,32,32,32,32,31,32,34,35,32,32,32,32,31,32,33,34,35,36,32,32,32,32,32,31,32,33,34,35,36,32,33,34,35,36,32,32,34,35,32,32,32,32,33,34,35,36,31,33,33,32,32,32,32,32,33,34,35,31,32,33,31,32,33,34,35,36,32,31,32,33,34,35,36,32,32,32,31,32,33,34,35,36,32,32,31],"f":[null,null,null,null,null,[[]],[[]],[[],["tryreserveerror",4]],[[]],[[["tryreserveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["tryreserveerror",4]],["bool",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["entry",4]],null,[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[],["occupiedentry",3]],[[]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[],["entry",4]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["occupiederror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["difference",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["hashmap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["union",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bucket",3]],[[["bucket",3]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonnull",3]],[[]],[[],["rawdrain",3]],[[["rawiter",3]],["rawdrain",3]],[[]],[[]],[[]],[[]],[[["bucket",3]]],[[["u64",15]],["bool",15]],[[["bucket",3]]],[[["u64",15]],[["option",4],["bucket",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["bucket",3]],[[["u64",15]]],[[["u64",15]],["bucket",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawintoiter",3]],[[]],[[]],[[]],[[]],[[["rawiter",3]],["rawintoiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[["u64",15]],["rawiterhash",3]],[[],["usize",15]],[[]],[[]],[[],[["option",4],["bucket",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["bucket",3]]],[[]],[[["bucket",3]]],[[["bucket",3]]],[[["bucket",3]]],[[["u64",15]],["option",4]],[[["bucket",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["bucket",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15]]],[[]]],"p":[[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"OccupiedError"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"]]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":[3,6,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Deque","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexSet","LinearMap","String","Vec","as_mut","as_mut","as_mut_slices","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_str","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","difference","drop","drop","drop","drop","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","front","front_mut","get","get","get_mut","get_mut","hash","hash","hash","hash","index","index","index_mut","index_mut","insert","insert","insert","intersection","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","keys","keys","len","len","len","len","len","mpmc","ne","ne","ne","new","new","new","new","new","new","new","new_with","partial_cmp","partial_cmp","pool","pop","pop","pop_back","pop_front","pop_unchecked","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","recent","remove","remove","remove","resize","resize_default","set_len","sorted_linked_list","spsc","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","write","write_char","write_str","write_str","BinaryHeap","Max","Min","PeekMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","default","deref","deref_mut","drop","drop","fmt","from","from","from","from","into","into","into","into","is_empty","iter","iter_mut","len","new","peek","peek_mut","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MpMcQueue","Q16","Q2","Q32","Q4","Q64","Q8","borrow","borrow_mut","default","dequeue","enqueue","from","into","new","try_from","try_into","type_id","Box","Init","Node","Pool","Uninit","alloc","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmp","deref","deref_mut","eq","fmt","fmt","free","from","from","from","from","from","grow","grow_exact","hash","init","into","into","into","into","into","new","partial_cmp","singleton","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Box","Data","Pool","alloc","as_mut","as_ref","borrow","borrow_mut","cmp","deref","deref_mut","drop","eq","fmt","fmt","forget","freeze","from","grow","grow_exact","hash","init","into","partial_cmp","try_from","try_into","type_id","FindMut","Iter","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_unchecked","get_unchecked","get_unchecked","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","iter","ne","ne","ne","new_u16","new_u8","new_unchecked","new_unchecked","new_unchecked","new_usize","next","none","none","none","option","option","option","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consumer","Iter","IterMut","Producer","Queue","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clone","clone","default","dequeue","dequeue","dequeue_unchecked","dequeue_unchecked","drop","enqueue","enqueue","enqueue_unchecked","enqueue_unchecked","eq","fmt","from","from","from","from","from","hash","hash","into","into","into","into","into","into_iter","into_iter","is_empty","is_full","iter","iter_mut","len","len","len","new","next","next","next_back","next_back","peek","peek","ready","ready","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["heaplessheapless::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::mpmc","","","","","","","","","","","","","","","","","","heapless::pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::pool::singleton","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::sorted_linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A fixed capacity double-ended queue.","A <code>heapless::IndexMap</code> using the default FNV hasher","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","A fixed capacity <code>String</code>","A fixed capacity <code>Vec</code>","","","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can …","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Clears the buffer, replacing every element with the given …","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the …","Returns true if the map contains a value for the …","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","","","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Provides a reference to the front element, or None if the …","Provides a mutable reference to the front element, or …","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","","","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Visits the values representing the intersection, i.e. the …","","","","","","","","Returns the contents of the vector as an array of length <code>M</code>…","Converts a <code>String</code> into a byte vector.","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>…","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code>…","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, …","Return an iterator over the values of the set, in their …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, …","An iterator visiting all key-value pairs in arbitrary …","Return an iterator over the keys of the map, in their …","An iterator visiting all keys in arbitrary order","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","A fixed capacity Multiple-Producer Multiple-Consumer …","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code>","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new history buffer, where every element is …","","","A heap-less, interrupt-safe, lock-free memory pool (*)","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the item from the back of the deque and returns …","Removes the item from the front of the deque and returns …","Removes the last element from a vector and returns it","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Returns a reference to the most recently written value.","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code>…","Fixed capacity Single Producer Single Consumer (SPSC) …","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in their …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","Writes an element to the buffer, overwriting the oldest …","","","","A priority queue implemented with a binary heap.","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","Returns the capacity of the binary heap.","Drops all items from the binary heap.","","","","","","","","","","","","","","","","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the length of the binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the peeked value from the heap and returns it.","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first …","","","","","","","","","","","","","MPMC queue with a capacity for N elements The max value …","MPMC queue with a capability for 16 elements.","MPMC queue with a capability for 2 elements.","MPMC queue with a capability for 32 elements.","MPMC queue with a capability for 4 elements.","MPMC queue with a capability for 64 elements.","MPMC queue with a capability for 8 elements.","","","","Returns the item in the front of the queue, or <code>None</code> if …","Adds an <code>item</code> to the end of the queue","","","Creates an empty queue","","","","A memory block","Initialized type state","Unfortunate implementation detail required to use the …","A lock-free memory pool","Uninitialized type state","Claims a memory block from the pool","","","","","","","","","","","","","","","","","","","Returns a memory block to the pool","","","","","","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","","","","","","Creates a new empty pool","","<code>Pool</code> as a global singleton","","","","","","","","","","","","","","","","A memory block that belongs to the global memory pool, …","The type of data that can be allocated on this pool","A global singleton memory pool","Claims a memory block from the pool","","","","","","","","","","","","Forgets the contents of this memory block without running …","(DO NOT USE, SEE DEPRECATION) Freezes the contents of …","","Increases the capacity of the pool","Increases the capacity of the pool","","Initializes this memory block","","","","","","Comes from [<code>SortedLinkedList::find_mut</code>].","Iterator for the linked list.","Index for the [<code>SortedLinkedList</code>] with specific backing …","Index for the [<code>SortedLinkedList</code>] with specific backing …","Index for the [<code>SortedLinkedList</code>] with specific backing …","Marker for Max sorted [<code>SortedLinkedList</code>].","Marker for Min sorted [<code>SortedLinkedList</code>].","A node in the [<code>SortedLinkedList</code>].","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","","","","","","","","","","This is only valid if <code>self.option()</code> is not <code>None</code>.","This is only valid if <code>self.option()</code> is not <code>None</code>.","This is only valid if <code>self.option()</code> is not <code>None</code>.","","","","","","","","","","","Checks if the linked list is empty.","Checks if the linked list is full.","Get an iterator over the sorted list.","","","","Create a new linked list.","Create a new linked list.","","","","Create a new linked list.","","","","","","","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A queue “consumer”; it can dequeue items from the …","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “producer”; it can enqueue items into the …","A statically allocated single producer single consumer …","","","","","","","","","","","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","","","","Returns the item in the front of the queue, or <code>None</code> if …","Returns the item in the front of the queue, or <code>None</code> if …","Returns the item in the front of the queue, without …","Returns the item in the front of the queue, without …","","Adds an <code>item</code> to the end of the queue","Adds an <code>item</code> to the end of the queue, returns back the …","Adds an <code>item</code> to the end of the queue, without checking if …","Adds an <code>item</code> to the end of the queue, without checking if …","","","","","","","","","","","","","","","","","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Returns the number of elements in the queue","Returns the number of elements in the queue","Returns the number of elements in the queue","Creates an empty queue with a fixed capacity of <code>N - 1</code>","","","","","Returns a reference to the item in the front of the queue …","Returns the item in the front of the queue without …","Returns if there are any items to dequeue. When this …","Returns if there is any space to enqueue a new item. When …","Splits a queue into producer and consumer endpoints","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,2,3,3,4,3,3,1,1,4,1,2,3,2,2,0,2,4,5,6,7,3,1,2,4,5,6,7,3,1,2,4,5,6,7,3,1,2,4,5,6,7,3,1,4,2,5,6,7,3,1,3,1,6,5,7,2,4,5,6,7,3,1,4,3,1,3,1,6,2,4,7,1,1,5,6,7,3,3,3,1,1,1,1,1,1,4,4,5,5,6,6,1,1,1,4,1,4,5,6,7,3,3,1,2,4,5,6,7,3,3,3,3,3,3,3,3,3,3,1,5,6,7,1,1,3,2,2,5,7,5,7,3,3,1,1,5,7,5,7,5,6,7,6,2,4,5,6,7,3,1,1,3,2,1,6,2,5,6,7,1,2,1,6,6,2,5,6,7,2,5,7,5,7,2,4,5,6,7,0,3,3,3,2,4,5,6,7,3,1,4,3,1,0,3,1,2,2,1,3,1,2,2,2,2,3,1,4,5,6,7,1,1,1,0,0,1,5,1,1,6,3,1,2,4,5,6,7,3,1,2,4,5,6,7,3,1,2,4,5,6,7,3,1,6,5,7,5,7,4,3,3,1,0,0,0,0,8,9,10,11,8,9,10,11,10,10,10,10,11,11,10,11,10,8,9,10,11,8,9,10,11,10,10,10,10,10,10,10,10,11,10,10,10,8,9,10,11,8,9,10,11,8,9,10,11,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,13,14,14,15,13,14,16,17,15,13,14,16,17,14,14,14,14,14,14,13,15,13,14,16,17,13,13,14,14,15,13,14,16,17,13,14,0,15,13,14,16,17,15,13,14,16,17,15,13,14,16,17,0,18,0,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,18,18,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,20,21,22,23,24,25,26,27,28,20,21,22,23,24,25,26,27,28,26,27,28,26,27,28,25,25,23,25,26,27,28,23,25,23,26,27,28,20,21,22,23,24,25,26,27,28,26,27,28,20,21,22,23,24,25,26,27,28,24,23,23,23,26,27,28,23,23,26,27,28,23,24,26,27,28,26,27,28,26,27,28,23,23,25,23,23,23,20,21,22,23,24,25,26,27,28,20,21,22,23,24,25,26,27,28,20,21,22,23,24,25,26,27,28,0,0,0,0,0,29,30,31,32,33,29,30,31,32,33,29,32,33,29,30,29,29,32,29,32,29,29,33,29,33,29,29,29,30,31,32,33,29,29,29,30,31,32,33,30,31,29,29,29,29,29,32,33,29,30,31,30,31,29,32,32,33,29,29,30,31,32,33,29,30,31,32,33,29,30,31,32,33],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["str",15]],[[],["vec",3]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["option",4]],[[],["option",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[["indexset",3]],["difference",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["indexmap",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["linearmap",3]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u64",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[]],[[["i8",15]]],[[["u8",15]]],[[["u16",15]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["str",15]],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["option",4]]],[[],[["bool",15],["result",4]]],[[],[["result",4],["option",4]]],[[["indexset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[]],[[]],[[["indexset",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["itermut",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["str",15]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["string",3]],[["option",4],["ordering",4]]],[[["vec",3]],[["option",4],["ordering",4]]],null,[[],[["option",4],["char",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[]],[[["str",15]],["result",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]]],null,null,[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["indexset",3]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["indexset",3]]],[[]],[[]],[[]],[[]],[[]],[[["char",15]],[["error",3],["result",4]]],[[["str",15]],[["error",3],["result",4]]],[[["str",15]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[]],[[],["option",4]],[[],[["option",4],["peekmut",3]]],[[],["option",4]],[[["peekmut",3]]],[[]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],[["option",4],["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3]],["ordering",4]],[[]],[[]],[[["box",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["box",3]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["maybeuninit",19]],["usize",15]],[[]],[[],[["box",3],["init",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3]],[["ordering",4],["option",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],[["option",4],["box",3]]],[[]],[[]],[[]],[[]],[[["box",3]],["ordering",4]],[[]],[[]],[[]],[[["box",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["box",3],["uninit",4]]],[[],[["init",4],["box",3]]],[[]],[[],["usize",15]],[[["maybeuninit",19]],["usize",15]],[[]],[[],[["init",4],["box",3]]],[[]],[[["box",3]],[["ordering",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["linkedindexu8",3]],[[],["linkedindexu16",3]],[[],["linkedindexusize",3]],[[["linkedindexu8",3]],["ordering",4]],[[["linkedindexu16",3]],["ordering",4]],[[["linkedindexusize",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[["linkedindexu8",3]],["bool",15]],[[["linkedindexu16",3]],["bool",15]],[[["linkedindexusize",3]],["bool",15]],[[],[["findmut",3],["option",4]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[["linkedindexu8",3]],["bool",15]],[[["linkedindexu16",3]],["bool",15]],[[["linkedindexusize",3]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[["linkedindexu8",3]],[["ordering",4],["option",4]]],[[["linkedindexu16",3]],[["ordering",4],["option",4]]],[[["linkedindexusize",3]],[["ordering",4],["option",4]]],[[],["option",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["queue",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Vec"],[3,"Deque"],[3,"String"],[3,"HistoryBuffer"],[3,"IndexMap"],[3,"IndexSet"],[3,"LinearMap"],[4,"Min"],[4,"Max"],[3,"BinaryHeap"],[3,"PeekMut"],[3,"MpMcQueue"],[3,"Pool"],[3,"Box"],[3,"Node"],[4,"Uninit"],[4,"Init"],[8,"Pool"],[3,"Box"],[3,"Min"],[3,"Max"],[3,"Node"],[3,"SortedLinkedList"],[3,"Iter"],[3,"FindMut"],[3,"LinkedIndexU8"],[3,"LinkedIndexU16"],[3,"LinkedIndexUsize"],[3,"Queue"],[3,"Iter"],[3,"IterMut"],[3,"Consumer"],[3,"Producer"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,10,14,14,0,0,3,4,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sorted_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","pop","remove","replace","reserve","retain","reverse","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sorted_by","split_off","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","indexmap::mapindexmap::setd":["Key equivalence trait.","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","","","","","","","Create an <code>IndexMap</code> from the sequence of key-value pairs …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, …","Gets a mutable reference to the entry’s value in the …","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be …","Returns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value at the supplied …","Returns a mutable reference to the value corresponding to …","Sets the value of the entry to <code>value</code>, and returns the …","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","","","","","","","","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Converts into a mutable reference to the entry’s value …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their …","Get the last key-value pair","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep …","Scan through each key-value pair in the map and keep …","","Reverses the order of the map’s key-value pairs in …","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map as much as possible.","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","","","","","","","","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in …","Returns <code>true</code> if all elements of <code>other</code> are contained in …","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where …","Reverses the order of the set’s values in place.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by value iterator …","Splits the collection into two at the given index.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>"],"i":[0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,3,0,2,0,0,2,4,3,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,7,8,10,4,4,7,8,10,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,4,4,4,4,4,4,4,4,5,3,6,4,7,8,10,12,5,3,6,4,7,8,9,10,11,12,13,4,5,4,4,4,2,4,4,4,4,4,5,4,4,5,3,6,4,4,4,4,5,6,4,4,5,3,6,4,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,6,5,4,4,4,5,3,6,4,4,7,8,9,10,11,12,13,4,4,7,8,9,10,11,12,4,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,3,3,3,3,4,5,4,5,4,4,4,2,4,4,5,4,5,4,4,4,4,7,8,9,10,11,12,13,4,4,4,4,4,5,4,5,4,4,4,4,7,8,10,4,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,4,4,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,16,18,19,20,21,14,14,16,18,19,20,21,15,16,17,14,15,16,17,14,14,14,14,14,14,14,14,15,16,18,19,20,21,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,15,16,17,14,15,16,14,15,16,17,18,19,20,21,15,16,17,18,19,20,21,15,16,17,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,14,16,18,19,20,21,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14],"f":[null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["drain",3]],[[],["entry",4]],[[["indexmap",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[],["keys",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["indexset",3]],["difference",3]],[[],["drain",3]],[[["indexset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[]],[[["usize",15]]],[[],["bool",15]],[[]],[[["indexset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexset",3]],["bool",15]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["indexset",3]],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["indexset",3]],["union",3]],[[["usize",15]]],[[["usize",15]]],[[]]],"p":[[8,"Equivalent"],[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":[8,8,8,8,8,3,8,16,8,8,8,8,8,6,8,8,8,8,8,5,10,5,10,11,11,11,11,11,11,11,11,11,11,11,0,5,10,10,10,5,10,5,11,0,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,12,0,11,11,11,10,11,11,10,11,10,11,10,11,11,10,10,11,0,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,0,5,10,11,11,11,11,11,5,5,5,5,0,12,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,10,5,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,10,0,11,11,11,11,10,10,5,10,11,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,3,6,6,3,11,11,11,11,11,11,12,11,11,12,11,11,11,8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,5,5,10,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,10,13,10,10,10,10,10,10,10,10,10,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,5,10,10,11,11,11,11,0,0,5,10,10,10,10,5,10,10,10,10,5,5,5,10,10,0,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,0,0,11,11,10,10,11,10,10,12,10,10,10,10,10,5,10,0,0,5,10,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,11,11,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,10,10,11,10,11,10,10,10,11,11,11,10,10,11,11,10,10,11,11,11,11,11,11,11,10,11,10,10,10,10,10,11,11,11,11,10,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,8,5,10,5,10,10,10,5,10],"n":["Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs_sub","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow_mut","cast","cast","checked_add","checked_div","checked_mul","checked_pow","checked_sub","clamp","clone","complex","conj","count_ones","count_zeros","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_ceil","div_floor","div_mod_floor","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_be","from_f32","from_f32","from_f64","from_f64","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd_lcm","hash","i","im","integer","into","inv","inv","is_even","is_finite","is_infinite","is_multiple_of","is_nan","is_negative","is_normal","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter","l1_norm","lcm","leading_zeros","max_value","min_value","mod_floor","mul","mul","mul","mul","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","next_multiple_of","norm_sqr","one","one","one","pow","pow","pow","powi","powu","prev_multiple_of","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rotate_left","rotate_right","saturating_add","saturating_sub","scale","set_one","set_one","set_zero","set_zero","signed_shl","signed_shr","signum","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","swap_bytes","to_be","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","trailing_zeros","traits","try_from","try_into","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ParseComplexError","borrow","borrow_mut","eq","fmt","fmt","from","im","into","ne","re","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","cmp","denom","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs_sub","abs_sub","as_","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","count_ones","count_zeros","float","fmt","fmt","fmt","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","identities","int","into","into","inv","is_negative","is_one","is_positive","is_zero","kind","leading_zeros","max_value","min_value","mul_add","mul_add_assign","one","one","ops","pow","pow","pow","pow","rotate_left","rotate_right","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","swap_bytes","to_be","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_zeros","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["numnum::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","num::rationalnum::traitsnum::traits::bounds","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::sign","","","","","","","","",""],"d":["Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of …","A complex number in Cartesian form.","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Useful functions for signed numbers (i.e. numbers that …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","","","","","","","","","","","","","Cast from one machine scalar to another.","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Raises a value to the power of exp, returning <code>None</code> if an …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","","","","","","","","","","Ceiled integer division.","Floored integer division.","Simultaneous floored integer division and modulus. …","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","","","","","","Creates a number from another value that can be converted …","","","","","Convert an integer from big endian to the target’s …","","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","Converts an <code>i128</code> to return an optional value of this …","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Convert from a string and radix (typically <code>2..=36</code>).","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","Converts an <code>u128</code> to return an optional value of this …","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this …","Greatest Common Divisor (GCD).","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","Returns imaginary unit","Imaginary portion of the complex number","","","","Returns <code>1/self</code>","Returns <code>true</code> if the number is even.","Checks if the given complex number is finite","Checks if the given complex number is infinite","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","Checks if the given complex number is normal","Returns <code>true</code> if the number is odd.","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Lowest Common Multiple (LCM).","Returns the number of leading zeros in the binary …","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","Floored integer modulo, satisfying:","","","","","","","","","","","","","","Create a new Complex","Rounds up to nearest multiple of argument.","Returns the square of the norm (since <code>T</code> doesn’t …","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","Real portion of the complex number","","","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns the sign of the number.","","","","","","","","","","","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Returns the number of trailing zeros in the binary …","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","A complex number in Cartesian form.","","","","","","","","","","Imaginary portion of the complex number","","","Real portion of the complex number","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Return Euler’s number.","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Convert a value to another, using the <code>as</code> operator.","","","","","","","Cast from one machine scalar to another.","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","","","","","Creates a number from another value that can be converted …","","","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","","","","","Returns the multiplicative inverse of <code>self</code>.","Returns true if the number is negative and false if the …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading zeros in the binary …","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns the sign of the number.","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Returns the number of trailing zeros in the binary …","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,3,3,3,3,3,3,3,3,3,3,3,0,0,4,5,6,0,7,0,3,0,3,8,8,3,3,3,3,3,3,3,3,3,9,9,9,9,9,3,9,9,3,3,3,3,3,3,3,3,10,3,3,3,3,8,3,11,3,11,3,11,3,11,3,11,11,3,3,11,3,11,8,3,1,3,3,11,3,11,3,11,11,3,3,11,3,11,9,9,3,3,3,0,3,3,3,9,3,3,9,3,2,3,9,3,12,2,13,3,0,3,9,8,14,14,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,0,12,3,0,0,8,3,3,9,3,3,0,0,0,0,0,3,3,3,3,3,3,3,3,3,8,8,15,15,3,3,12,3,13,8,8,0,2,3,3,3,3,3,3,3,3,3,3,8,8,3,16,3,16,3,16,3,16,3,16,16,3,3,16,3,16,8,3,16,3,16,3,16,16,3,3,16,3,16,8,0,3,3,3,3,8,8,0,13,3,0,0,0,0,17,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,18,18,18,18,18,18,3,18,18,3,18,18,18,0,0,0,0,0,0,19,0,19,0,20,21,20,21,0,22,21,0,9,0,9,0,9,0,9,9,21,9,9,21,20,21,0,9,21,0,9,20,21,20,9,9,9,0,9,0,9,0,21,20,20,9,0,22,9,0,22,20,21,20,21,20,21,21,21,0,0,0,0,0,0,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,0,0,0,0,0,0,23,24,27,28,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,29,0,0,0,29,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,31,30,31,30,30,30,30,30,30,31,30,30,30,30,30,30,30,30,30,30,30,31,30,30,30,30,30,30,30,30,30,31,31,30,30,30,30,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,30,31,30,31,30,0,0,0,0,0,0,0,0,0,0,32,33,32,32,32,32,32,32,32,32,32,0,0,0,1,0,33,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,34,35,29,32,0,0,0,0,32,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,2,0,2,17,33,36,33,36,0,0,0,4,5,6,37,0,38,39,40,7,0,0,0,8,8,0,33,36,36,10,33,36,8,11,11,11,11,11,11,11,11,8,1,11,11,11,11,11,11,0,0,33,36,34,2,12,2,13,36,8,14,14,35,41,0,12,0,0,0,8,29,8,8,15,42,43,15,44,12,13,0,8,8,0,2,8,8,16,16,16,16,16,16,16,16,8,16,16,16,16,16,16,8,33,36,33,36,33,36,8,8,45,46,47,48,49,50,0,13,0,14,14,0,0,0,0,17,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,32,32,32,32,32,32,32,32,32,0,0,32,32,32,32,32,32,32,32,32,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,12,13,0,12,12,13,0,13,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,37,38,39,40,7,0,34,34,0,0,35,35,41,0,0,0,52,53,54,0,0,0,0,15,42,43,15,44,0,0,0,0,0,0,45,46,47,48,49,50,29,0,0,0,29,0,0,0,2,0,2,2,2,0,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["complex",3]],null,[[],["complex",3]],[[],["u32",15]],[[],["u32",15]],[[],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["complex",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["option",4]],[[],[["option",4],["complex",3]]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[["f32",15]],[["option",4],["complex",3]]],[[["f32",15]],["option",4]],[[["f64",15]],[["option",4],["complex",3]]],[[["f64",15]],["option",4]],[[["i128",15]],[["option",4],["complex",3]]],[[["i128",15]],["option",4]],[[["i16",15]],[["option",4],["complex",3]]],[[["i16",15]],["option",4]],[[["i32",15]],[["option",4],["complex",3]]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],[["option",4],["complex",3]]],[[["i8",15]],[["option",4],["complex",3]]],[[["i8",15]],["option",4]],[[["isize",15]],[["option",4],["complex",3]]],[[["isize",15]],["option",4]],[[]],[[["str",15]],[["complex",3],["result",4]]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[["u128",15]],[["option",4],["complex",3]]],[[["u128",15]],["option",4]],[[["u16",15]],[["option",4],["complex",3]]],[[["u16",15]],["option",4]],[[["u32",15]],[["option",4],["complex",3]]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],[["option",4],["complex",3]]],[[["u8",15]],[["option",4],["complex",3]]],[[["u8",15]],["option",4]],[[["usize",15]],[["option",4],["complex",3]]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[],["complex",3]],null,null,[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]],["bool",15]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[],["complex",3]],null,[[["usize",15]]],[[["u32",15]]],[[["i32",15]],["complex",3]],[[["u32",15]],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],null,null,[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["isize",15]]],[[]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["u32",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["complex",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[],["complex",3]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],null,null,null,null,[[]],[[]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],null,[[]],[[["parsecomplexerror",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[["ratio",3]],["ordering",4]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[["str",15]],[["result",4],["parseratioerror",3],["ratio",3]]],[[["u32",15],["str",15]],[["result",4],["parseratioerror",3],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ordering",4],["option",4]]],[[["u128",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[],["ratio",3]],[[],["ratio",3]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],null,[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["option",4]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["u32",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]]],"p":[[8,"Num"],[8,"Signed"],[3,"Complex"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[8,"AsPrimitive"],[3,"ParseComplexError"],[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[8,"Pow"],[3,"Ratio"],[3,"ParseRatioError"],[8,"FloatConst"],[4,"FloatErrorKind"],[8,"Inv"],[8,"MulAdd"],[3,"ParseFloatError"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","Complex32","Complex64","ParseComplexError","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow","borrow_mut","borrow_mut","clone","conj","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","mul","mul","mul","mul","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","new","norm_sqr","one","powi","powu","product","product","re","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","","","","","","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","","","Returns <code>1/self</code>","","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","","","","","","","","","","","","","","","Create a new Complex","Returns the square of the norm (since <code>T</code> doesn’t …","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,1],"f":[null,null,null,null,[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["toprimitive",8]],["option",4]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],null,[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,3,2,3,0,4,4,3,0,5,0,5,0,5,0,5,5,3,5,5,3,2,3,0,5,3,0,5,2,3,2,5,5,5,0,5,0,5,0,3,2,2,5,0,4,5,0,4,4,2,3,2,3,2,3,3,3],"f":[null,null,null,null,null,[[["average",8]],["average",8]],[[]],[[["average",8]],["average",8]],[[]],[[["integer",8],["clone",8]],[["integer",8],["clone",8]]],[[]],[[]],[[]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["extendedgcd",3]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]]],[[]],[[["integer",8]]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integer",8]],["integer",8]],[[]],null,[[["integer",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[],[["integer",8],["clone",8]]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15],["roots",8]],["roots",8]],[[["u32",15]]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,0,0,0,0,0,0,1,2,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","tn":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","cmp","denom","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1],"f":[null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[["floatcore",8],["numcast",8]],[["option",4],["ratio",3]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[["ratio",3]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[],["ordering",4]],[[]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[]],[[["ratio",3]]],[[],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[],["ratio",3]],[[["str",15]],[["parseratioerror",3],["ratio",3],["result",4]]],[[["u32",15],["str",15]],[["parseratioerror",3],["ratio",3],["result",4]]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],[["ordering",4],["option",4]]],[[["i16",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,10,10,11,10,11,10,10,10,11,11,11,10,10,11,11,10,10,11,11,11,11,11,11,11,10,11,10,10,10,10,10,11,11,11,11,10,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","sign","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,12,0,11,11,12,0,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,0,22,22,0,0,23,23,24,0,0,0,25,26,27,0,0,0,0,28,29,30,28,31,0,0,0,0,0,0,32,33,34,35,36,37,38,0,0,0,38,0,0,0,39,0,39,39,39,0,39],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["option",4],["numcast",8]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["one",8],["usize",15],["checkedmul",8],["clone",8]],[["option",4],["one",8],["checkedmul",8],["clone",8]]],[[["mul",8],["one",8],["usize",15],["clone",8]],[["one",8],["mul",8],["clone",8]]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Signed"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","IntoIter","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::token_stream","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural …","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","","","","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of …","Returns the span pointing to the opening delimiter of …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","","","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,2,1,9,9,6,6,10,10,10,10,5,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,10,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,7,7,7,6,8,4,9,9,7,3,8,4,9,10,4,5,3,8,4,9,10,8,8,8,10,10,6,7,3,8,2,4,1,9,10,5,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["char",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literal",3]],[[],["span",3]],[[["char",15]],["literal",3]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["ordering",4]],[[]],[[],["delimiter",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[]],[[["span",3]],["span",3]],[[["literal",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["group",3]],["tokentree",4]],[[]],[[["ident",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],[["tokenstream",3],["lexerror",3],["result",4]]],[[["str",15]],[["result",4],["lexerror",3]]],[[]],[[["i128",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i8",15]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["bool",15]],[[["isize",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["span",3]],[["span",3],["option",4]]],[[["span",3]],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["tokenstream",3],["delimiter",4]],["group",3]],[[["spacing",4],["char",15]],["punct",3]],[[["str",15],["span",3]],["ident",3]],[[["ident",3]],[["option",4],["ordering",4]]],[[["span",3]],["span",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["spacing",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["str",15]],["literal",3]],[[["usize",15],["rangebounds",8]],[["span",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u128",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u8",15]],["literal",3]],[[],["span",3]],[[["usize",15]],["literal",3]],[[["usize",15]],["literal",3]],null,[[]],[[]],[[],["intoiter",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["tokentree",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"proc_macro_error":{"doc":"proc-macro-error","t":[3,8,13,4,16,8,8,16,3,13,11,14,14,5,11,11,11,11,11,11,11,11,11,11,14,0,11,14,14,14,14,11,10,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,23,11,11,11,11,11,10,11,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5],"n":["Diagnostic","DiagnosticExt","Error","Level","Ok","OptionExt","ResultExt","Some","SpanRange","Warning","abort","abort","abort_call_site","abort_if_dirty","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_site","clone","clone_into","collapse","diagnostic","dummy","emit","emit_call_site_error","emit_call_site_warning","emit_error","emit_warning","eq","expect_or_abort","expect_or_abort","first","fmt","fmt","fmt","from","from","from","from","from_tokens","help","into","into","into","join_range","last","message","new","note","proc_macro_error","single_span","span","span_error","span_help","span_note","span_range_error","span_range_error","span_range_help","span_range_help","span_range_note","span_range_note","spanned","spanned_range","spanned_range","to_owned","to_tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_or_abort","append_dummy","set_dummy"],"q":["proc_macro_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro_error::dummy",""],"d":["Represents a single diagnostic message","A collection of methods that do not exist in …","","Represents a diagnostic level","","This traits expands <code>Option</code> with some handy shortcuts.","This traits expands <code>Result<T, Into<Diagnostic>></code> with some …","","","","Abort the proc-macro’s execution and display the …","Abort proc-macro execution right now and display the …","Shortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro…","Abort macro execution and display all the emitted errors, …","","","","","","","Create a <code>SpanRange</code> resolving at call site.","","","Collapse the range into single span, preserving as much …","Build <code>Diagnostic</code> instance from provided arguments.","Facility to emit dummy implementations (or whatever) in …","Display the diagnostic while not aborting macro execution.","Shortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …","Shortcut for <code>emit_warning!(Span::call_site(), ...)</code>.","Emit an error while not aborting the proc-macro right …","Emit a warning. Warnings are not errors and compilation …","","Behaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …","Behaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …","","","","","","","","","Construct span range from a <code>TokenStream</code>. This method …","Attach a “help” note to your main message.","","","","Join two span ranges. The resulting range will start at …","","The message of main warning/error (no notes attached)","Create a new diagnostic message that points to …","Attach a note to your main message","","Create a range with the <code>first</code> and <code>last</code> spans being the …","","Add another error message to self such that it will be …","Attach a “help” note to your main message, the note …","Attach a note to your main message, the note will have it…","Add another error message to self such that it will be …","","Attach a “help” note to your main message, the note …","","Attach a note to your main message, the note will have it…","","Create a new diagnostic message that points to the <code>span</code>","Create a new diagnostic message that points to the …","","","","","","","","","","","","","Behaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …","Same as [<code>set_dummy</code>] but, instead of resetting, appends …","Sets dummy token stream which will be appended to …"],"i":[0,0,1,0,2,0,0,3,0,1,4,0,0,0,1,4,5,1,4,5,5,5,5,5,0,0,4,0,0,0,0,1,2,3,5,1,4,5,1,4,4,5,5,4,1,4,5,5,5,4,4,4,0,5,4,4,4,4,6,4,6,4,6,4,4,6,4,5,4,1,4,5,1,4,5,1,4,5,2,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["spanrange",3]],[[]],[[],["span",3]],null,null,[[]],null,null,null,null,[[["level",4]],["bool",15]],[[["str",15]]],[[["str",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[]],[[]],[[["totokens",8]]],[[["string",3]]],[[]],[[]],[[]],[[["spanrange",3]]],null,[[],["str",15]],[[["level",4],["string",3]]],[[["string",3]]],null,[[["span",3]]],[[],["span",3]],[[["string",3],["span",3]]],[[["string",3],["span",3]]],[[["string",3],["span",3]]],[[["spanrange",3],["string",3]]],[[["spanrange",3],["string",3]]],[[["spanrange",3],["string",3]]],[[["spanrange",3],["string",3]]],[[["spanrange",3],["string",3]]],[[["spanrange",3],["string",3]]],[[["level",4],["string",3],["span",3]]],[[["spanrange",3],["level",4],["string",3]]],[[["spanrange",3],["level",4],["string",3]]],[[]],[[["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]],[["option",4],["tokenstream",3]]]],"p":[[4,"Level"],[8,"ResultExt"],[8,"OptionExt"],[3,"Diagnostic"],[3,"SpanRange"],[8,"DiagnosticExt"]]},\
"proc_macro_error_attr":{"doc":"This is <code>#[proc_macro_error]</code> attribute to be used with …","t":[23],"n":["proc_macro_error"],"q":["proc_macro_error_attr"],"d":[""],"i":[0],"f":[null],"p":[]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,2,0,3,3,0,0,2,2,3,3,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],null,[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[],[["option",4],["span",3]]],[[],[["option",4],["span",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rtic":{"doc":"Real-Time Interrupt-driven Concurrency (RTIC) framework …","t":[12,18,3,8,8,3,16,23,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,5,10,10,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10],"n":["0","DISABLE_INTERRUPT_ON_EMPTY_QUEUE","Exclusive","Monotonic","Mutex","RacyCell","T","app","borrow","borrow","borrow_mut","borrow_mut","clear_compare_flag","deref","deref_mut","disable_timer","enable_timer","from","from","get_mut_unchecked","get_unchecked","into","into","lock","lock","mutex_prelude","new","on_interrupt","pend","reset","set_compare","try_from","try_from","try_into","try_into","type_id","type_id","Mutex","T","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T10","T10","T10","T11","T11","T12","T2","T2","T2","T2","T2","T2","T2","T2","T2","T2","T2","T3","T3","T3","T3","T3","T3","T3","T3","T3","T3","T4","T4","T4","T4","T4","T4","T4","T4","T4","T5","T5","T5","T5","T5","T5","T5","T5","T6","T6","T6","T6","T6","T6","T6","T7","T7","T7","T7","T7","T7","T8","T8","T8","T8","T8","T9","T9","T9","T9","TupleExt01","TupleExt02","TupleExt03","TupleExt04","TupleExt05","TupleExt06","TupleExt07","TupleExt08","TupleExt09","TupleExt10","TupleExt11","TupleExt12","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock"],"q":["rtic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rtic::mutex_prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","This tells RTIC if it should disable the interrupt bound …","Newtype over <code>&\'a mut T</code> that implements the <code>Mutex</code> trait","A monotonic clock / counter definition.","Memory safe access to shared resources","Internal replacement for <code>static mut T</code>","Data protected by the mutex","Attribute used to declare a RTIC application","","","","","Clear the compare interrupt flag.","","","Optional. This is used to save power, this is called when …","Optional. This is used to save power, this is called when …","","","Get <code>&mut T</code>","Get <code>&T</code>","","","Creates a critical section and grants temporary access to …","","Makes locks work on N-tuples, locks the mutexes from …","Create a RacyCell","Optional. Commonly used for performing housekeeping of a …","Sets the given <code>interrupt</code> as pending","Optionally resets the counter to <em>zero</em> for a fixed …","Set the compare value of the timer interrupt.","","","","","","","Memory safe access to shared resources","Data protected by the mutex","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …"],"i":[1,2,0,0,0,0,3,0,4,1,4,1,2,1,1,2,2,4,1,4,4,4,1,3,1,0,4,2,0,2,2,4,1,4,1,4,1,0,3,5,6,7,8,9,10,11,12,13,14,15,16,14,15,16,15,16,16,6,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,8,9,10,11,12,13,14,15,16,9,10,11,12,13,14,15,16,10,11,12,13,14,15,16,11,12,13,14,15,16,12,13,14,15,16,13,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,3,5,6,7,8,9,10,11,12,13,14,15,16],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["instant",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Exclusive"],[8,"Monotonic"],[8,"Mutex"],[3,"RacyCell"],[8,"TupleExt01"],[8,"TupleExt02"],[8,"TupleExt03"],[8,"TupleExt04"],[8,"TupleExt05"],[8,"TupleExt06"],[8,"TupleExt07"],[8,"TupleExt08"],[8,"TupleExt09"],[8,"TupleExt10"],[8,"TupleExt11"],[8,"TupleExt12"]]},\
"rtic_core":{"doc":"Core abstractions of the Real-Time Interrupt-driven …","t":[12,3,8,16,11,11,11,11,11,11,10,11,0,11,11,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10],"n":["0","Exclusive","Mutex","T","borrow","borrow_mut","deref","deref_mut","from","into","lock","lock","prelude","try_from","try_into","type_id","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T1","T10","T10","T10","T11","T11","T12","T2","T2","T2","T2","T2","T2","T2","T2","T2","T2","T2","T3","T3","T3","T3","T3","T3","T3","T3","T3","T3","T4","T4","T4","T4","T4","T4","T4","T4","T4","T5","T5","T5","T5","T5","T5","T5","T5","T6","T6","T6","T6","T6","T6","T6","T7","T7","T7","T7","T7","T7","T8","T8","T8","T8","T8","T9","T9","T9","T9","TupleExt01","TupleExt02","TupleExt03","TupleExt04","TupleExt05","TupleExt06","TupleExt07","TupleExt08","TupleExt09","TupleExt10","TupleExt11","TupleExt12","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock","lock"],"q":["rtic_core","","","","","","","","","","","","","","","","rtic_core::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Newtype over <code>&\'a mut T</code> that implements the <code>Mutex</code> trait","Memory safe access to shared resources","Data protected by the mutex","","","","","","","Creates a critical section and grants temporary access to …","","Makes locks work on N-tuples, locks the mutexes from …","","","","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Data protected by the mutex.","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Auto-generated tuple implementation, see <code>Mutex</code> for …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …","Creates a critical section and grants temporary access to …"],"i":[1,0,0,2,1,1,1,1,1,1,2,1,0,1,1,1,3,4,5,6,7,8,9,10,11,12,13,14,12,13,14,13,14,14,4,5,6,7,8,9,10,11,12,13,14,5,6,7,8,9,10,11,12,13,14,6,7,8,9,10,11,12,13,14,7,8,9,10,11,12,13,14,8,9,10,11,12,13,14,9,10,11,12,13,14,10,11,12,13,14,11,12,13,14,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12,13,14],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Exclusive"],[8,"Mutex"],[8,"TupleExt01"],[8,"TupleExt02"],[8,"TupleExt03"],[8,"TupleExt04"],[8,"TupleExt05"],[8,"TupleExt06"],[8,"TupleExt07"],[8,"TupleExt08"],[8,"TupleExt09"],[8,"TupleExt10"],[8,"TupleExt11"],[8,"TupleExt12"]]},\
"rtic_monotonic":{"doc":"Core abstractions of the Real-Time Interrupt-driven …","t":[12,12,12,12,12,12,8,18,8,8,3,3,3,3,3,3,3,8,3,18,18,3,16,16,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","0","Clock","DISABLE_INTERRUPT_ON_EMPTY_QUEUE","Duration","Extensions","Fraction","Generic","Hours","Instant","Microseconds","Milliseconds","Minutes","Monotonic","Nanoseconds","SCALING_FACTOR","SCALING_FACTOR","Seconds","T","T","_","_","add","add","add","add","add","add","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div","checked_div","checked_duration_since","checked_duration_until","checked_mul","checked_mul","checked_sub","clear_compare_flag","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","denominator","disable_timer","div","div","div","div","div","div","div","duration_since_epoch","enable_timer","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_integer","hash","hash","hash","hash","hash","hash","hash","hash","hash","hours","hours","hours","hours","integer","integer","integer","integer","integer","integer","integer","integer","into","into","into","into","into","into","into","into","into","max_value","microseconds","microseconds","microseconds","microseconds","milliseconds","milliseconds","milliseconds","milliseconds","min_value","minutes","minutes","minutes","minutes","mul","mul","mul","mul","mul","mul","mul","nanoseconds","nanoseconds","nanoseconds","nanoseconds","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_reduce","new_timer","numerator","on_interrupt","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","recip","rem","rem","rem","rem","rem","rem","reset","scaling_factor","seconds","seconds","seconds","seconds","set_compare","sub","sub","sub","sub","sub","sub","sub","sub","to_generic","to_integer","to_rate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_now","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["rtic_monotonic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","The <code>Clock</code> trait provides an abstraction for …","This tells RTIC if it should disable the interrupt bound …","An unsigned, fixed-point duration type","Create duration-based extensions from primitive numeric …","A fractional value","The <code>Generic</code> <code>Duration</code> type allows an arbitrary <em>scaling …","A duration unit type","Represents an instant of time relative to a specific <code>Clock</code>","A duration unit type","A duration unit type","A duration unit type","A monotonic clock / counter definition.","A duration unit type","The duration of one clock tick in seconds, AKA the clock …","The fractional <em>scaling factor</em>","A duration unit type","The type to hold the tick count","The <em>integer</em> (magnitude) type","Create duration-based extensions from primitive numeric …","Fixed-point value type","See Add/Sub","","See Add/Sub","","","See Add/Sub","","See Add/Sub","","See Add/Sub","","See Add/Sub","Add a [<code>Duration</code>] to an <code>Instant</code> resulting in a new, later …","","","","","","","","","","","","","","","","","","","This <code>Instant</code> + [<code>Duration</code>] = later (future) <code>Instant</code>","Multiply with overflow checking","Checked <code>Fraction</code> / <code>Fraction</code> = <code>Fraction</code>","Returns the amount of time elapsed from another instant …","Returns the amount of time elapsed from self until that …","Multiply with overflow checking","Checked <code>Fraction</code> × <code>Fraction</code> = <code>Fraction</code>","This <code>Instant</code> - [<code>Duration</code>] = earlier <code>Instant</code>","Clear the compare interrupt flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the denominator of the fraction","Optional. This is used to save power, this is called when …","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","Panicky <code>Fraction</code> / <code>Fraction</code> = <code>Fraction</code>","Returns the [<code>Duration</code>] (in the provided units) since the …","Optional. This is used to save power, this is called when …","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","","","","See Formatting","","See Formatting","","See Formatting","","See Formatting","","","See Formatting","See Formatting","","","","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting to a <code>Generic</code> <code>Duration</code>","","See Converting to a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","","Constructs a <code>Fraction</code> from an integer.","","","","","","","","","","hours","hours","hours","hours","Returns the integer part of the <code>FixedPoint</code> value","Returns the <em>integer</em> part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","See Get the integer part","","","","","","","","","","Returns the maximum integer value","microseconds","microseconds","microseconds","microseconds","milliseconds","milliseconds","milliseconds","milliseconds","Returns the minimum integer value","minutes","minutes","minutes","minutes","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","See Mul/Div","Panicky <code>Fraction</code> × <code>Fraction</code> = <code>Fraction</code>","nanoseconds","nanoseconds","nanoseconds","nanoseconds","","Constructs a new fixed-point <code>Generic</code> <code>Duration</code> value","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","See Constructing a duration","Construct a new <code>Fraction</code>.","Construct a new Instant from the provided <code>Clock</code>","Construct a new <code>Fraction</code>.","Spawn a new, <code>OneShot</code> [<code>Timer</code>] from this clock","Return the numerator of the fraction","Optional. Commonly used for performing housekeeping of a …","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","See Comparisons","","Calculates the difference between two <code>Instant</code>s resulting …","Returns the reciprocal of the fraction","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","See Remainder","Optionally resets the counter to <em>zero</em> for a fixed …","Returns the <em>scaling factor</em> [<code>Fraction</code>] part","seconds","seconds","seconds","seconds","Set the compare value of the timer interrupt.","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","See Add/Sub","Subtract a [<code>Duration</code>] from an <code>Instant</code> resulting in a new, …","Subtract a two <code>Instant</code>s resulting in a <code>Duration</code>","Construct a <code>Generic</code> <code>Duration</code> from a <em>named</em> <code>Duration</code> (eg. […","Returns the value truncated to an integer","Convert to <em>named</em> <code>Rate</code>","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from a <code>Generic</code> <code>Duration</code>","See Converting between <code>Duration</code>s","","See Converting from <code>core</code> types","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting between <code>Duration</code>s","See Converting from <code>core</code> types","See Converting from a <code>Generic</code> <code>Duration</code>","","","","","","","","","","","","Get the current Instant","","","","","","","","",""],"i":[1,2,3,4,5,6,0,7,0,0,0,0,0,0,0,0,0,0,0,8,9,0,8,9,0,0,1,1,2,2,3,3,4,4,5,5,6,6,10,11,1,2,3,4,5,6,12,10,11,1,2,3,4,5,6,12,10,10,9,12,10,10,9,12,10,7,11,1,2,3,4,5,6,12,10,11,1,2,3,4,5,6,12,10,11,1,2,3,4,5,6,12,12,7,1,2,3,4,5,6,12,10,7,11,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,12,10,11,1,1,2,2,3,3,4,4,5,5,6,6,12,10,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,12,10,12,11,1,2,3,4,5,6,12,10,13,13,13,13,9,11,1,2,3,4,5,6,11,1,2,3,4,5,6,12,10,9,13,13,13,13,13,13,13,13,9,13,13,13,13,1,2,3,4,5,6,12,13,13,13,13,12,11,1,1,2,2,3,3,4,4,5,5,6,6,12,10,12,8,12,7,11,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,12,10,12,1,2,3,4,5,6,7,11,13,13,13,13,7,1,2,3,4,5,6,10,10,14,12,14,11,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,12,10,11,1,2,3,4,5,6,12,10,8,11,1,2,3,4,5,6,12,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["instant",3]]],[[]],[[["instant",3]]],[[["instant",3]]],[[]],[[["instant",3]]],[[]],[[["instant",3]]],[[]],[[["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["instant",3]]],[[],["option",4]],[[["fraction",3]],[["fraction",3],["option",4]]],[[["instant",3]],[["option",4],["generic",3]]],[[["instant",3]],[["option",4],["generic",3]]],[[],["option",4]],[[["fraction",3]],[["fraction",3],["option",4]]],[[],[["option",4],["instant",3]]],[[]],[[],["generic",3]],[[],["hours",3]],[[],["minutes",3]],[[],["seconds",3]],[[],["milliseconds",3]],[[],["microseconds",3]],[[],["nanoseconds",3]],[[],["fraction",3]],[[],["instant",3]],[[["generic",3]],["ordering",4]],[[["hours",3]],["ordering",4]],[[["minutes",3]],["ordering",4]],[[["seconds",3]],["ordering",4]],[[["milliseconds",3]],["ordering",4]],[[["microseconds",3]],["ordering",4]],[[["nanoseconds",3]],["ordering",4]],[[["fraction",3]],["ordering",4]],[[["instant",3]],["ordering",4]],[[],["generic",3]],[[],["hours",3]],[[],["minutes",3]],[[],["seconds",3]],[[],["milliseconds",3]],[[],["microseconds",3]],[[],["nanoseconds",3]],[[],["fraction",3]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fraction",3]]],[[],["generic",3]],[[]],[[["generic",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["hours",3]],["bool",15]],[[["minutes",3]],["bool",15]],[[["nanoseconds",3]],["bool",15]],[[["milliseconds",3]],["bool",15]],[[["seconds",3]],["bool",15]],[[["microseconds",3]],["bool",15]],[[["fraction",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["microseconds",3]],["generic",3]],[[["minutes",3]],["generic",3]],[[["milliseconds",3]],["generic",3]],[[["nanoseconds",3]],["generic",3]],[[["seconds",3]],["generic",3]],[[]],[[["hours",3]],["generic",3]],[[["u32",15],["minutes",3]],[["hours",3],["u64",15]]],[[["microseconds",3],["u32",15]],[["hours",3],["u64",15]]],[[["seconds",3]],["hours",3]],[[["duration",3]],[["hours",3],["u64",15]]],[[["milliseconds",3],["u32",15]],[["hours",3],["u64",15]]],[[["milliseconds",3]],["hours",3]],[[["u32",15],["hours",3]],[["hours",3],["u64",15]]],[[["u32",15],["seconds",3]],[["hours",3],["u64",15]]],[[]],[[["nanoseconds",3]],["hours",3]],[[["microseconds",3]],["hours",3]],[[["minutes",3]],["hours",3]],[[["nanoseconds",3],["u32",15]],[["hours",3],["u64",15]]],[[["nanoseconds",3],["u32",15]],[["minutes",3],["u64",15]]],[[["seconds",3]],["minutes",3]],[[["microseconds",3]],["minutes",3]],[[]],[[["u32",15],["minutes",3]],[["minutes",3],["u64",15]]],[[["duration",3]],[["minutes",3],["u64",15]]],[[["microseconds",3],["u32",15]],[["minutes",3],["u64",15]]],[[["nanoseconds",3]],["minutes",3]],[[["milliseconds",3],["u32",15]],[["minutes",3],["u64",15]]],[[["u32",15],["seconds",3]],[["minutes",3],["u64",15]]],[[["milliseconds",3]],["minutes",3]],[[["u32",15],["hours",3]],[["minutes",3],["u64",15]]],[[["u32",15],["hours",3]],[["seconds",3],["u64",15]]],[[["microseconds",3],["u32",15]],[["seconds",3],["u64",15]]],[[["u32",15],["seconds",3]],[["seconds",3],["u64",15]]],[[["duration",3]],[["seconds",3],["u64",15]]],[[["milliseconds",3]],["seconds",3]],[[["u32",15],["minutes",3]],[["seconds",3],["u64",15]]],[[["milliseconds",3],["u32",15]],[["seconds",3],["u64",15]]],[[["microseconds",3]],["seconds",3]],[[["nanoseconds",3]],["seconds",3]],[[["nanoseconds",3],["u32",15]],[["seconds",3],["u64",15]]],[[]],[[]],[[["nanoseconds",3],["u32",15]],[["u64",15],["milliseconds",3]]],[[["nanoseconds",3]],["milliseconds",3]],[[["microseconds",3],["u32",15]],[["u64",15],["milliseconds",3]]],[[["milliseconds",3],["u32",15]],[["u64",15],["milliseconds",3]]],[[["u32",15],["hours",3]],[["u64",15],["milliseconds",3]]],[[["u32",15],["seconds",3]],[["u64",15],["milliseconds",3]]],[[["microseconds",3]],["milliseconds",3]],[[["u32",15],["minutes",3]],[["u64",15],["milliseconds",3]]],[[]],[[["nanoseconds",3],["u32",15]],[["microseconds",3],["u64",15]]],[[["nanoseconds",3]],["microseconds",3]],[[["u32",15],["seconds",3]],[["microseconds",3],["u64",15]]],[[["u32",15],["hours",3]],[["microseconds",3],["u64",15]]],[[["microseconds",3],["u32",15]],[["microseconds",3],["u64",15]]],[[["milliseconds",3],["u32",15]],[["microseconds",3],["u64",15]]],[[["u32",15],["minutes",3]],[["microseconds",3],["u64",15]]],[[["microseconds",3],["u32",15]],[["nanoseconds",3],["u64",15]]],[[["u32",15],["minutes",3]],[["nanoseconds",3],["u64",15]]],[[["milliseconds",3],["u32",15]],[["nanoseconds",3],["u64",15]]],[[["u32",15],["hours",3]],[["nanoseconds",3],["u64",15]]],[[]],[[["u32",15],["seconds",3]],[["nanoseconds",3],["u64",15]]],[[["nanoseconds",3],["u32",15]],[["nanoseconds",3],["u64",15]]],[[]],[[]],[[["u32",15]],["fraction",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hours",3]],[[],["hours",3]],[[],["hours",3]],[[],["hours",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["microseconds",3]],[[],["microseconds",3]],[[],["microseconds",3]],[[],["microseconds",3]],[[],["milliseconds",3]],[[],["milliseconds",3]],[[],["milliseconds",3]],[[],["milliseconds",3]],[[]],[[],["minutes",3]],[[],["minutes",3]],[[],["minutes",3]],[[],["minutes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fraction",3]]],[[],["nanoseconds",3]],[[],["nanoseconds",3]],[[],["nanoseconds",3]],[[],["nanoseconds",3]],[[["fraction",3]],["bool",15]],[[["fraction",3]],["generic",3]],[[],["hours",3]],[[],["hours",3]],[[],["minutes",3]],[[],["minutes",3]],[[],["seconds",3]],[[],["seconds",3]],[[],["milliseconds",3]],[[],["milliseconds",3]],[[],["microseconds",3]],[[],["microseconds",3]],[[],["nanoseconds",3]],[[],["nanoseconds",3]],[[["u32",15]],["fraction",3]],[[],["instant",3]],[[["u32",15]],[["fraction",3],["conversionerror",4],["result",4]]],[[],[["armed",3],["oneshot",3],["timer",3]]],[[],["u32",15]],[[]],[[["generic",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["seconds",3]],[["ordering",4],["option",4]]],[[["microseconds",3]],[["ordering",4],["option",4]]],[[["minutes",3]],[["ordering",4],["option",4]]],[[["hours",3]],[["ordering",4],["option",4]]],[[["nanoseconds",3]],[["ordering",4],["option",4]]],[[["milliseconds",3]],[["ordering",4],["option",4]]],[[["fraction",3]],[["ordering",4],["option",4]]],[[["instant",3]],[["ordering",4],["option",4]]],[[],["fraction",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fraction",3]],[[],["seconds",3]],[[],["seconds",3]],[[],["seconds",3]],[[],["seconds",3]],[[["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["instant",3]]],[[["fraction",3]],[["conversionerror",4],["result",4],["generic",3]]],[[],["u32",15]],[[],[["conversionerror",4],["result",4]]],[[],["result",4]],[[["nanoseconds",3],["u64",15]],[["result",4],["hours",3]]],[[["minutes",3],["u64",15]],[["result",4],["hours",3]]],[[],["result",4]],[[["hours",3],["u64",15]],[["result",4],["hours",3]]],[[["seconds",3],["u64",15]],[["result",4],["hours",3]]],[[["u64",15],["milliseconds",3]],[["hours",3],["result",4]]],[[["microseconds",3],["u64",15]],[["result",4],["hours",3]]],[[["generic",3]],[["hours",3],["result",4]]],[[["duration",3]],[["result",4],["hours",3]]],[[["hours",3],["u64",15]],[["result",4],["minutes",3]]],[[["microseconds",3],["u64",15]],[["result",4],["minutes",3]]],[[["duration",3]],[["result",4],["minutes",3]]],[[["nanoseconds",3],["u64",15]],[["result",4],["minutes",3]]],[[["generic",3]],[["minutes",3],["result",4]]],[[["u64",15],["milliseconds",3]],[["result",4],["minutes",3]]],[[["minutes",3],["u64",15]],[["result",4],["minutes",3]]],[[["hours",3]],[["result",4],["minutes",3]]],[[["seconds",3],["u64",15]],[["result",4],["minutes",3]]],[[],["result",4]],[[["seconds",3],["u64",15]],[["result",4],["seconds",3]]],[[["u64",15],["milliseconds",3]],[["seconds",3],["result",4]]],[[["hours",3]],[["result",4],["seconds",3]]],[[["duration",3]],[["seconds",3],["result",4]]],[[],["result",4]],[[["minutes",3]],[["result",4],["seconds",3]]],[[["minutes",3],["u64",15]],[["result",4],["seconds",3]]],[[["nanoseconds",3],["u64",15]],[["result",4],["seconds",3]]],[[["generic",3]],[["seconds",3],["result",4]]],[[["hours",3],["u64",15]],[["result",4],["seconds",3]]],[[["microseconds",3],["u64",15]],[["result",4],["seconds",3]]],[[["hours",3]],[["result",4],["milliseconds",3]]],[[["generic",3]],[["result",4],["milliseconds",3]]],[[],["result",4]],[[["minutes",3],["u64",15]],[["result",4],["milliseconds",3]]],[[["seconds",3],["u64",15]],[["milliseconds",3],["result",4]]],[[["microseconds",3],["u64",15]],[["result",4],["milliseconds",3]]],[[["u64",15],["milliseconds",3]],[["result",4],["milliseconds",3]]],[[["seconds",3]],[["result",4],["milliseconds",3]]],[[["duration",3]],[["result",4],["milliseconds",3]]],[[["nanoseconds",3],["u64",15]],[["result",4],["milliseconds",3]]],[[["hours",3],["u64",15]],[["result",4],["milliseconds",3]]],[[["minutes",3]],[["result",4],["milliseconds",3]]],[[["seconds",3],["u64",15]],[["result",4],["microseconds",3]]],[[["milliseconds",3]],[["microseconds",3],["result",4]]],[[["generic",3]],[["microseconds",3],["result",4]]],[[["hours",3],["u64",15]],[["result",4],["microseconds",3]]],[[],["result",4]],[[["duration",3]],[["microseconds",3],["result",4]]],[[["minutes",3]],[["microseconds",3],["result",4]]],[[["hours",3]],[["microseconds",3],["result",4]]],[[["minutes",3],["u64",15]],[["microseconds",3],["result",4]]],[[["u64",15],["milliseconds",3]],[["microseconds",3],["result",4]]],[[["seconds",3]],[["result",4],["microseconds",3]]],[[["microseconds",3],["u64",15]],[["microseconds",3],["result",4]]],[[["nanoseconds",3],["u64",15]],[["microseconds",3],["result",4]]],[[["milliseconds",3]],[["result",4],["nanoseconds",3]]],[[["minutes",3],["u64",15]],[["result",4],["nanoseconds",3]]],[[],["result",4]],[[["hours",3]],[["result",4],["nanoseconds",3]]],[[["seconds",3]],[["nanoseconds",3],["result",4]]],[[["microseconds",3]],[["result",4],["nanoseconds",3]]],[[["hours",3],["u64",15]],[["nanoseconds",3],["result",4]]],[[["u64",15],["milliseconds",3]],[["nanoseconds",3],["result",4]]],[[["seconds",3],["u64",15]],[["nanoseconds",3],["result",4]]],[[["microseconds",3],["u64",15]],[["nanoseconds",3],["result",4]]],[[["minutes",3]],[["result",4],["nanoseconds",3]]],[[["nanoseconds",3],["u64",15]],[["nanoseconds",3],["result",4]]],[[["duration",3]],[["result",4],["nanoseconds",3]]],[[["generic",3]],[["result",4],["nanoseconds",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["instant",3],["error",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Hours"],[3,"Minutes"],[3,"Seconds"],[3,"Milliseconds"],[3,"Microseconds"],[3,"Nanoseconds"],[8,"Monotonic"],[8,"Clock"],[8,"_"],[3,"Instant"],[3,"Generic"],[3,"Fraction"],[8,"_"],[8,"Duration"]]},\
"rtic_syntax":{"doc":"The Real-Time Interrupt-driven Concurrency (RTIC) meta …","t":[4,13,13,13,6,3,6,3,13,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,3,6,3,6,13,13,6,4,13,13,4,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,4,3,3,13,13,3,6,13,3,3,3,3,3,3,3,3,6,3,3,13,3,3,6,3,3,4,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Context","HardwareTask","Idle","Init","Map","P","Set","Settings","SoftwareTask","analyze","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","from","from","from","has_local_resources","has_shared_resources","ident","into","into","into","is_idle","is_init","new","optimize_priorities","parse","parse2","parse_binds","parse_extern_interrupt","runs_once","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Analysis","Ceiling","Channel","Channels","CoOwned","Contended","LocalResourceLocations","Location","Owned","Owned","Ownership","Ownerships","Priority","Resource","SendTypes","SharedResourceLocations","SyncTypes","Task","Tasks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","channels","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_owned","local_resource_locations","ne","needs_lock","ownerships","send_types","shared_resource_locations","sync_types","tasks","tasks","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ceiling","priority","priority","Access","App","AppArgs","Declared","Exclusive","ExternInterrupt","ExternInterrupts","External","HardwareTask","HardwareTaskArgs","Idle","IdleArgs","Init","InitArgs","Local","LocalResource","LocalResources","Monotonic","MonotonicArgs","Shared","SharedResource","SharedResourceProperties","SharedResources","SoftwareTask","SoftwareTaskArgs","TaskLocal","args","args","args","args","args","args","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","binds","binds","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","cfgs","cfgs","cfgs","cfgs","cfgs","cfgs","clone","clone","clone_into","clone_into","context","context","context","context","declared_local_resources","default","default","default","default","device","eq","expr","extern_interrupts","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hardware_tasks","ident","idle","init","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_exclusive","is_extern","is_extern","is_shared","local_resources","local_resources","local_resources","local_resources","local_resources","lock_free","monotonics","name","name","name","peripherals","priority","priority","priority","properties","shared_resources","shared_resources","shared_resources","shared_resources","software_tasks","stmts","stmts","stmts","stmts","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_code","user_imports","user_local_struct","user_shared_struct"],"q":["rtic_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rtic_syntax::analyze","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rtic_syntax::analyze::Ownership","","","rtic_syntax::astd":["Execution context","A hardware task: <code>#[exception]</code> or <code>#[interrupt]</code>","The <code>idle</code> context","The <code>init</code>-ialization function","An ordered map keyed by identifier","Immutable pointer","An order set","Parser and optimizer configuration","A software task: <code>#[task]</code>","RTIC application analysis","Abstract Syntax Tree","","","","","","","","","","","","","","Whether this context has local resources","Whether this context has shared resources","The identifier of this context","","","","Is this the <code>idle</code> context?","Is this the <code>init</code>-ialization context?","Boxes <code>x</code> making the value immutable","Whether to “compress” priorities or not","Parses the input of the <code>#[app]</code> attribute","<code>proc_macro2::TokenStream</code> version of <code>parse</code>","Whether to accept the <code>binds</code> argument in <code>#[task]</code> or not","Whether to parse <code>extern</code> interrupts (functions) or not","Whether this context runs only once","","","","","","","","","","","The result of analyzing an RTIC application","Priority ceiling","A channel used to send messages","All channels, keyed by dispatch priority","“Co-owned” by more than one task; all of them have …","Contended by more than one task; the tasks have different …","Location of all <em>used</em> local resources","Resource location","Owned by a single task","resource that is owned","Resource ownership","Resource ownership","Task priority","Resource name","These types must implement the <code>Send</code> trait","Location of all <em>used</em> shared resources","These types must implement the <code>Sync</code> trait","Task name","List of tasks names","","","","","","","","","The channel capacity","SPSC message channels","","","","","","","","","","","","","","","","","","","Whether this resource is exclusively owned","Location of all <em>used</em> local resources","","Whether this resource needs to a lock at this priority …","Resource ownership","These types must implement the <code>Send</code> trait","Location of all <em>used</em> shared resources","These types must implement the <code>Sync</code> trait","A vector containing all task names","Tasks that can be spawned on this channel","","","","","","","","","","","","","","","Priority ceiling","Priority of the task that owns this resource","Priority of the tasks that co-own this resource","Resource access","The <code>#[app]</code> attribute","The arguments of the <code>#[app]</code> attribute","The local is declared in the task","<code>[x]</code>, a mutable resource","Interrupt that could be used to dispatch software tasks","Interrupts used to dispatch software tasks","The local is declared externally (i.e. <code>#[local]</code> struct)","A hardware task","Hardware task metadata","The <code>idle</code> context","<code>idle</code> context metadata","The <code>init</code>-ialization function","<code>init</code> context metadata","A <code>static mut</code> variable local to and owned by a context","A local resource, defined in <code>#[local]</code>","Local resource access/declaration list in task attribute","Monotonic","Monotonic metadata","<code>[&x]</code>, a static non-mutable resource","A shared resource, defined in <code>#[shared]</code>","Shared resource properties","Shared resource access list in task attribute","A software task","Software task metadata","A wrapper of the 2 kinds of locals that tasks can have","The arguments to the <code>#[app]</code> attribute","<code>init</code> context metadata","<code>idle</code> context metadata","Monotonic args","Software task metadata","Hardware task metadata","Attributes that will apply to this interrupt handler","Attributes that will apply to this <code>init</code> function","Attributes that will apply to this <code>idle</code> function","Attributes that will apply to this resource","Attributes that will apply to this resource","Attributes that will apply to this interrupt handler","Attributes that will apply to this interrupt handler","Attributes like <code>#[link_section]</code>","The interrupt or exception that this monotonic is bound to","The interrupt or exception that this task is bound to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The task capacity: the maximum number of pending messages …","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","<code>#[cfg]</code> attributes like <code>#[cfg(debug_assertions)]</code>","","","","","The context argument","The context argument","The context argument","The context argument","Get all declared local resources, i.e. …","","","","If this is the default monotonic","Device","","Initial value","Interrupts used to dispatch software tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hardware tasks: <code>#[task(binds = ..)]</code>s","The identifier of the monotonic","The <code>#[idle]</code> function","The <code>#[init]</code> function","The inputs of this software task","","","","","","","","","","","","","","","","","","","","Is this enum in the <code>Exclusive</code> variant?","The task is declared externally","The task is declared externally","Is this enum in the <code>Shared</code> variant?","Task local resources defined in <code>#[local]</code>","Local resources that can be accessed from this context","Local resources that can be accessed from this context","Local resources that can be accessed from this context","Local resources that can be accessed from this context","A lock free (exclusive resource)","Monotonic clocks","The name of the <code>const</code> item on which the <code>#[app]</code> attribute …","The name of the <code>#[init]</code> function","The name of the <code>#[idle]</code> function","Peripherals","The priority of this monotonic","The priority of this task","The priority of this task","Shared resource properties","Resources shared between tasks defined in <code>#[shared]</code>","Shared resources that can be accessed from this context","Shared resources that can be accessed from this context","Shared resources that can be accessed from this context","Software tasks: <code>#[task]</code>","The statements that make up this <code>init</code> function","The statements that make up this <code>idle</code> function","The statements that make up the task handler","The statements that make up the task handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of this resource","The type of this resource","The type of this monotonic","Type","","","","","","","","","","","","","","","","","","","","User code","User imports","The name of the user provided local resources struct","The name of the user provided shared resources struct"],"i":[0,1,1,1,0,0,0,0,1,0,0,2,1,3,2,1,3,1,1,3,2,2,1,3,1,1,1,2,1,3,1,1,2,3,0,0,3,3,1,1,2,1,3,2,1,3,2,1,3,0,0,0,0,4,4,0,0,4,5,0,0,0,0,0,0,0,0,0,6,7,4,5,6,7,4,5,7,6,4,5,4,5,7,4,5,7,4,5,6,7,4,5,6,7,4,5,4,6,4,4,6,6,6,6,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,8,9,10,0,0,0,11,12,0,0,11,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,13,14,15,16,17,18,19,14,15,20,21,17,18,22,23,24,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,29,20,21,16,17,18,22,19,12,19,12,14,15,17,18,13,26,27,29,23,25,12,22,25,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,13,16,13,13,17,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,12,17,18,12,13,26,27,29,24,28,13,13,14,15,25,23,29,24,20,13,27,29,24,13,14,15,17,18,19,12,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,20,21,16,22,13,19,25,14,26,15,27,28,20,21,16,23,17,29,18,24,22,11,12,13,13,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["context",4]],[[]],[[],["settings",3]],[[]],[[]],[[]],[[]],[[["app",3]],["bool",15]],[[["app",3]],["bool",15]],[[["app",3]],["ident",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["p",3]],null,[[["settings",3],["tokenstream",3]],[["error",3],["result",4]]],[[["tokenstream2",3],["settings",3]],[["error",3],["result",4]]],null,null,[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["ownership",4]],[[],["location",4]],[[]],[[]],[[],["channel",3]],[[["ownership",4]],["bool",15]],[[["location",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[["ownership",4]],["bool",15]],[[["u8",15]],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[],["externinterrupt",3]],[[],["access",4]],[[]],[[]],null,null,null,null,[[],["vec",3]],[[]],[[]],[[]],null,null,[[["access",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null],"p":[[4,"Context"],[3,"P"],[3,"Settings"],[4,"Ownership"],[4,"Location"],[3,"Analysis"],[3,"Channel"],[13,"Contended"],[13,"Owned"],[13,"CoOwned"],[4,"TaskLocal"],[4,"Access"],[3,"App"],[3,"Init"],[3,"Idle"],[3,"Monotonic"],[3,"SoftwareTask"],[3,"HardwareTask"],[3,"ExternInterrupt"],[3,"SharedResource"],[3,"LocalResource"],[3,"Local"],[3,"MonotonicArgs"],[3,"HardwareTaskArgs"],[3,"AppArgs"],[3,"InitArgs"],[3,"IdleArgs"],[3,"SharedResourceProperties"],[3,"SoftwareTaskArgs"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":[8,8],"n":["CloneStableDeref","StableDeref"],"q":["stable_deref_trait",""],"d":["An unsafe marker trait for types where clones deref to …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[null,null],"p":[]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","display","display","display","display","display","display","display","display","display","display","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_ident","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern \\\"C\\\"</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&&</code> operator (logical and)","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","Angle bracketed arguments of a path segment: the <code><K, V></code> …","One arm of a <code>match</code> expression: <code>0...10 => { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -> bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: …","The <code>&</code> operator (bitwise and)","The <code>&=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>\'a\'</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator<Item: Display></code>.","An associated type bound: <code>Iterator<Item: Display></code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>\\\"data\\\"</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","The <code>>=</code> operator (greater than or equal to)","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>></code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo<A> { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: …","A type alias: …","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code><=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>\'a</code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A lifetime argument.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code><</code> operator (less than)","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::<T>(a, b)</code>.","The <code>::<></code> explicit type parameters passed to a method call:…","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with …","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: …","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##\\\"data\\\"##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&a</code> or <code>&mut a</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A reference pattern: <code>&mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code><<</code> operator (shift left)","The <code><<=</code> operator","The <code>>></code> operator (shift right)","The <code>>>=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: …","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo<A> { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: …","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code>…","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into<String></code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into<String></code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code><X, Y></code> into a turbofish …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like…","","","","","","","","","","","","","","","","","","","","Returns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variantenerics required to complete the definition.","If this path consists of a single ident, returns the …ame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</codeeturns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to …","","","","","","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator<Item = &LifetimeDef> over the …","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator<Item = &mut LifetimeDef> over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the…","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","","","","","","","","","","","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","A trait that can provide the <code>Span</code> of the complete …","Split a type’s generics into the pieces required for …","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","Trait this impl implementsype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple …","Creates a cursor referencing the first token in the …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","","","","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at an <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or …","","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","","","","","","","","","","","Render the error as an invocation of <code>compile_error!</code>.","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or…","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","","","","","","","","","","","","","","Inserts an element at position <code>index</code>.","","","","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&</code>","<code>&&</code>","<code>&=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=></code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>>=</code>","None-delimited group","<code>></code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code><-</code>","<code><=</code>","<code>let</code>","<code>loop</code>","<code><</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-></code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code><<</code>","<code><<=</code>","<code>>></code>","<code>>>=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codei":[0,1,1,1,2,0,0,3,4,3,3,3,0,0,0,3,4,0,0,3,0,5,1,1,1,1,1,1,0,3,6,0,3,7,8,8,3,6,6,3,3,6,9,3,10,11,12,13,14,5,0,0,5,3,15,16,0,0,0,0,17,18,0,1,1,12,19,20,1,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,3,0,0,0,0,0,0,6,12,22,0,3,0,0,0,0,0,12,1,0,0,0,0,23,3,23,4,1,9,0,7,3,12,0,0,0,0,0,0,4,0,3,4,16,24,6,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,11,25,20,5,0,26,0,27,3,7,0,0,0,0,0,0,0,0,21,3,1,0,3,12,22,13,14,4,7,12,0,3,28,0,0,27,0,0,13,14,3,0,12,1,1,23,26,29,30,1,18,0,4,28,2,18,1,7,24,3,8,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,3,23,4,7,0,0,0,0,0,4,16,0,3,7,0,15,0,31,3,4,7,1,1,23,3,7,16,0,3,0,21,1,1,1,1,0,4,7,12,22,0,6,0,3,12,19,7,1,1,0,25,12,12,0,0,0,0,0,0,0,4,3,3,3,4,7,7,0,0,3,10,11,20,12,22,13,14,17,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,3,12,19,29,29,30,3,12,0,0,0,0,0,0,0,0,3,12,22,13,14,6,4,7,0,0,0,0,0,0,3,7,3,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,33,51,52,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,100,56,138,139,56,62,140,141,140,141,49,58,78,82,93,114,50,63,69,83,86,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,158,87,88,158,159,101,111,176,183,188,59,123,147,44,76,91,32,94,100,164,171,173,132,0,144,53,66,74,174,182,131,0,60,0,124,49,50,127,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,38,190,41,161,42,52,80,85,153,87,88,89,158,159,90,98,100,106,109,111,113,135,137,188,86,65,83,154,154,89,90,109,113,181,33,97,61,150,92,0,0,119,154,155,2,87,89,109,110,111,94,113,114,115,138,51,38,6,165,166,167,168,140,141,169,190,76,130,132,56,62,40,122,183,174,175,179,181,36,182,53,79,184,131,133,65,91,171,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,190,146,54,67,87,89,160,90,98,101,102,113,115,187,59,60,45,63,64,66,67,44,71,35,74,75,77,80,81,84,85,90,98,113,125,0,92,185,86,51,76,99,103,170,172,132,142,48,143,38,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,30,152,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,140,141,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,190,190,33,34,63,155,142,48,143,38,144,24,26,26,26,26,145,146,27,27,27,51,29,29,29,147,148,52,16,16,16,16,149,150,151,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,30,30,30,152,152,41,10,85,153,86,9,154,11,11,11,11,87,87,88,89,155,25,25,25,156,28,157,20,20,20,20,158,159,160,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,23,23,23,23,23,161,162,46,163,164,22,22,22,22,22,105,106,107,108,13,13,13,13,13,109,110,111,112,14,14,14,14,14,113,114,115,116,33,31,31,31,117,118,6,6,6,6,6,6,6,6,165,166,167,168,140,140,141,141,169,15,138,8,119,119,119,119,19,19,19,19,170,171,172,1,18,173,21,120,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,186,43,43,2,5,42,187,188,189,47,190,190,190,190,190,190,190,73,39,91,94,99,100,101,102,103,111,115,33,119,186,64,175,41,154,155,42,47,86,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,129,38,51,52,87,89,90,91,92,95,96,97,98,99,100,101,102,103,161,162,46,106,107,109,111,113,115,33,119,124,43,187,188,65,94,176,151,63,66,152,120,50,33,34,189,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,29,29,2,186,32,94,100,164,118,29,29,58,60,61,63,69,83,104,186,127,54,55,57,29,74,174,67,120,160,117,88,159,36,154,155,156,158,34,154,73,129,146,68,129,69,41,154,155,42,47,70,95,108,112,116,178,126,96,154,44,62,85,137,40,97,156,50,35,98,106,117,181,36,124,37,153,185,121,147,145,38,88,6,165,166,167,168,140,141,169,190,55,57,81,50,50,50,33,34,189,154,145,148,151,39,40,71,79,156,33,34,179,184,133,189,0,0,0,38,26,145,146,27,51,147,148,16,3,53,54,55,49,57,58,59,60,39,45,50,61,62,63,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,165,166,167,168,140,141,169,138,119,1,18,173,21,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,17,7,186,43,5,42,187,188,189,190,0,190,144,144,138,138,0,144,0,144,186,52,144,0,0,52,165,173,3,38,190,63,67,86,120,123,37,134,135,137,26,144,145,146,151,72,76,156,138,180,128,132,134,38,6,165,166,167,168,140,141,169,190,47,144,157,149,151,0,72,180,128,77,35,33,40,117,92,46,76,75,160,54,55,57,96,186,117,94,97,74,90,92,95,98,99,101,102,104,105,106,107,108,109,110,111,112,113,115,116,170,120,174,38,6,165,166,167,168,140,141,169,190,118,93,105,110,114,142,48,143,38,38,144,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,30,152,152,41,10,85,153,86,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,6,165,165,166,166,167,167,168,168,140,140,141,141,169,169,138,119,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,190,190,190,152,169,0,154,163,181,98,106,173,99,170,144,124,6,165,166,167,168,140,141,100,65,73,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,38,140,141,190,142,48,143,38,144,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,119,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,190,0,144,138,94,100,101,104,161,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,78,40,52,45,80,89,90,98,102,106,109,113,115,121,135,187,47,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,154,154,102,107,111,115,177,136,103,172,148,190,82,94,100,33,34,104,165,166,167,168,169,169,33,34,91,171,52,90,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,113,114,115,119,154,157,83,4,183,17,84,0,0,191,191,192,191,192,192,192,192,192,192,191,192,192,192,191,192,192,192,191,191,192,192,192,192,192,191,192,191,192,191,192,0,193,193,193,0,0,0,194,0,0,0,0,0,0,0,195,196,195,197,198,199,196,195,197,198,199,195,197,199,197,199,199,195,197,0,195,196,195,197,199,195,195,199,199,195,196,195,197,198,199,199,196,195,197,198,199,199,199,195,195,199,199,200,195,194,198,194,194,195,196,195,195,195,195,199,195,199,197,199,195,199,196,195,197,198,199,196,195,197,198,199,196,195,197,198,199,0,201,202,0,0,0,0,0,0,0,0,202,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,203,203,204,206,207,208,202,203,204,206,207,208,202,203,203,203,203,203,203,203,203,203,204,205,206,207,208,209,202,203,203,203,203,203,203,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,203,202,202,203,203,203,203,203,203,204,205,206,207,208,209,203,202,204,205,206,207,208,209,204,205,206,207,208,209,203,203,203,203,203,203,203,202,203,203,203,204,205,206,207,208,209,203,202,203,204,206,207,208,202,203,202,203,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,202,202,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,264,266,269,270,271,273,275,276,278,279,283,286,288,291,294,295,298,301,306,307,309,211,264,266,269,270,271,273,275,276,278,279,283,286,288,291,294,295,298,301,306,307,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,310,311,312,313,211,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullidentlifetime",3]],["ordering",4]],[[["ident",3]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["constparams",3]],[[],["constparamsmut",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["metanamevalue",3]],["meta",4]],[[]],[[["metalist",3]],["meta",4]],[[["path",3]],["meta",4]],[[]],[[]],[[]],[[["lit",4]],["nestedmeta",4]],[[["meta",4]],["nestedmeta",4]],[[]],[[["fieldsunnamed",3]],["fields",4]],[[["fieldsnamed",3]],["fields",4]],[[]],[[]],[[]],[[]],[[["visrestricted",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["vispublic",3]],["visibility",4]],[[]],[[]],[[]],[[]],[[["exprcast",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[]],[[["exprif",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["member",4]],[[["ident",3]],["member",4]],[[["index",3]],["member",4]],[[]],[[]],[[["usize",15]],["index",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typeparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[]],[[["constparam",3]],["genericparam",4]],[[]],[[["ident",3]]],[[]],[[]],[[]],[[]],[[["lifetime",3]],["typeparambound",4]],[[["traitbound",3]],["typeparambound",4]],[[]],[[]],[[]],[[]],[[["predicatetype",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicateeq",3]],["wherepredicate",4]],[[]],[[]],[[]],[[["itemforeignmod",3]],["item",4]],[[["itemstatic",3]],["item",4]],[[["deriveinput",3]],["item",4]],[[["itemmacro",3]],["item",4]],[[["itemtraitalias",3]],["item",4]],[[["itemimpl",3]],["item",4]],[[["itemmacro2",3]],["item",4]],[[["itemenum",3]],["item",4]],[[["itemuse",3]],["item",4]],[[["itemfn",3]],["item",4]],[[["itemstruct",3]],["item",4]],[[["itemunion",3]],["item",4]],[[["itemtrait",3]],["item",4]],[[["itemexterncrate",3]],["item",4]],[[]],[[["itemmod",3]],["item",4]],[[["itemconst",3]],["item",4]],[[["itemtype",3]],["item",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usepath",3]],["usetree",4]],[[["userename",3]],["usetree",4]],[[["useglob",3]],["usetree",4]],[[["usegroup",3]],["usetree",4]],[[["usename",3]],["usetree",4]],[[]],[[]],[[]],[[]],[[]],[[["foreignitemmacro",3]],["foreignitem",4]],[[["foreignitemtype",3]],["foreignitem",4]],[[]],[[["foreignitemfn",3]],["foreignitem",4]],[[["foreignitemstatic",3]],["foreignitem",4]],[[]],[[]],[[]],[[]],[[["traititemmethod",3]],["traititem",4]],[[["traititemconst",3]],["traititem",4]],[[["traititemtype",3]],["traititem",4]],[[["traititemmacro",3]],["traititem",4]],[[]],[[]],[[]],[[]],[[]],[[["implitemmacro",3]],["implitem",4]],[[]],[[["implitemtype",3]],["implitem",4]],[[["implitemconst",3]],["implitem",4]],[[["implitemmethod",3]],["implitem",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pattype",3]],["fnarg",4]],[[["receiver",3]],["fnarg",4]],[[]],[[]],[[["litbool",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[]],[[["litbytestr",3]],["lit",4]],[[["litstr",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litint",3]],["lit",4]],[[]],[[]],[[]],[[]],[[]],[[["literal",3]]],[[]],[[["literal",3]]],[[]],[[]],[[]],[[]],[[["itemenum",3]],["deriveinput",3]],[[]],[[["itemunion",3]],["deriveinput",3]],[[["itemstruct",3]],["deriveinput",3]],[[["dataenum",3]],["data",4]],[[["datastruct",3]],["data",4]],[[]],[[["dataunion",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typeimpltrait",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typemacro",3]],["type",4]],[[]],[[["typetuple",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pator",3]],["pat",4]],[[["pattype",3]],["pat",4]],[[["patreference",3]],["pat",4]],[[["patslice",3]],["pat",4]],[[["patbox",3]],["pat",4]],[[["patident",3]],["pat",4]],[[["patrange",3]],["pat",4]],[[["patlit",3]],["pat",4]],[[["patmacro",3]],["pat",4]],[[["patwild",3]],["pat",4]],[[]],[[["patpath",3]],["pat",4]],[[["patstruct",3]],["pat",4]],[[["pattuple",3]],["pat",4]],[[["patrest",3]],["pat",4]],[[["pattuplestruct",3]],["pat",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["extern",3]],["ident",3]],[[["crate",3]],["ident",3]],[[["super",3]],["ident",3]],[[]],[[["selftype",3]],["ident",3]],[[["selfvalue",3]],["ident",3]],[[["underscore",3]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["ident",3]]],null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[],[["iter",3],["field",3]]],[[],[["field",3],["itermut",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],null,null,null,null,null,[[],[["option",4],["lifetime",3]]],null,null,null,[[],["lifetimes",3]],null,null,null,null,[[],["lifetimesmut",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["whereclause",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3],["str",15]]],[[["lifetime",3]]],[[["literal",3]]],[[["span",3],["str",15]]],[[["span",3]]],[[["span",3],["u8",15]]],[[["span",3],["char",15]]],[[["span",3],["str",15]]],[[["span",3],["str",15]]],[[["span",3],["bool",15]]],[[["str",15],["span",3]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["result",6],["arm",3]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["result",6],["usetree",4]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["str",15]],[["result",6],["file",3]]],[[["parsestream",6]],[["result",6],["vec",3]]],null,[[],[["result",6],["meta",4]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["result",6],["vec",3]]],null,[[["str",15]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],[[["parsestream",6]],[["expr",4],["result",6]]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[["ident",3]],[["option",4],["ordering",4]]],null,null,null,null,null,null,null,null,null,[[],["path",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],[["fnarg",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],null,null,null,null,null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["span",3],["option",4]]],[[],["span",3]],[[],[["span",3],["option",4]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["option",4],["span",3]]],[[],["span",3]],null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeparams",3]],[[],["typeparamsmut",3]],null,null,null,null,null,null,null,null,null,[[],["ident",3]],null,null,null,null,null,null,[[],["string",3]],[[],[["vec",3],["u8",15]]],[[],["u8",15]],[[],["char",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["option",4]],[[],["span",3]],[[]],[[],["tokenstream",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["error",3]]],[[],["cursor",3]],[[]],null,[[]],[[],["error",3]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["lexerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[]],[[],["bool",15]],[[],["lookahead1",3]],[[["span",3],["display",8]]],[[["display",8],["totokens",8]]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["tokenstream",3]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],[[],[["punctuated",3],["result",6]]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["result",6]],[[],["tokenstream",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intopairs",3]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["pairs",3]],[[],["pairsmut",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["option",4],["pair",4]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullstr",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["underscore",3]],["bool",15]],[[["abstract",3]],["bool",15]],[[["as",3]],["bool",15]],[[["async",3]],["bool",15]],[[["auto",3]],["bool",15]],[[["await",3]],["bool",15]],[[["become",3]],["bool",15]],[[["box",3]],["bool",15]],[[["break",3]],["bool",15]],[[["const",3]],["bool",15]],[[["continue",3]],["bool",15]],[[["crate",3]],["bool",15]],[[["default",3]],["bool",15]],[[["do",3]],["bool",15]],[[["dyn",3]],["bool",15]],[[["else",3]],["bool",15]],[[["enum",3]],["bool",15]],[[["extern",3]],["bool",15]],[[["final",3]],["bool",15]],[[["fn",3]],["bool",15]],[[["for",3]],["bool",15]],[[["if",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["in",3]],["bool",15]],[[["let",3]],["bool",15]],[[["loop",3]],["bool",15]],[[["macro",3]],["bool",15]],[[["match",3]],["bool",15]],[[["mod",3]],["bool",15]],[[["move",3]],["bool",15]],[[["mut",3]],["bool",15]],[[["override",3]],["bool",15]],[[["priv",3]],["bool",15]],[[["pub",3]],["bool",15]],[[["ref",3]],["bool",15]],[[["return",3]],["bool",15]],[[["selftype",3]],["bool",15]],[[["selfvalue",3]],["bool",15]],[[["static",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["super",3]],["bool",15]],[[["trait",3]],["bool",15]],[[["try",3]],["bool",15]],[[["type",3]],["bool",15]],[[["typeof",3]],["bool",15]],[[["union",3]],["bool",15]],[[["unsafe",3]],["bool",15]],[[["unsized",3]],["bool",15]],[[["use",3]],["bool",15]],[[["virtual",3]],["bool",15]],[[["where",3]],["bool",15]],[[["while",3]],["bool",15]],[[["yield",3]],["bool",15]],[[["add",3]],["bool",15]],[[["addeq",3]],["bool",15]],[[["and",3]],["bool",15]],[[["andand",3]],["bool",15]],[[["andeq",3]],["bool",15]],[[["at",3]],["bool",15]],[[["bang",3]],["bool",15]],[[["caret",3]],["bool",15]],[[["careteq",3]],["bool",15]],[[["colon",3]],["bool",15]],[[["colon2",3]],["bool",15]],[[["comma",3]],["bool",15]],[[["div",3]],["bool",15]],[[["diveq",3]],["bool",15]],[[["dollar",3]],["bool",15]],[[["dot",3]],["bool",15]],[[["dot2",3]],["bool",15]],[[["dot3",3]],["bool",15]],[[["dotdoteq",3]],["bool",15]],[[["eq",3]],["bool",15]],[[["eqeq",3]],["bool",15]],[[["ge",3]],["bool",15]],[[["gt",3]],["bool",15]],[[["le",3]],["bool",15]],[[["lt",3]],["bool",15]],[[["muleq",3]],["bool",15]],[[["ne",3]],["bool",15]],[[["or",3]],["bool",15]],[[["oreq",3]],["bool",15]],[[["oror",3]],["bool",15]],[[["pound",3]],["bool",15]],[[["question",3]],["bool",15]],[[["rarrow",3]],["bool",15]],[[["larrow",3]],["bool",15]],[[["rem",3]],["bool",15]],[[["remeq",3]],["bool",15]],[[["fatarrow",3]],["bool",15]],[[["semi",3]],["bool",15]],[[["shl",3]],["bool",15]],[[["shleq",3]],["bool",15]],[[["shr",3]],["bool",15]],[[["shreq",3]],["bool",15]],[[["star",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["subeq",3]],["bool",15]],[[["tilde",3]],["bool",15]],[[["brace",3]],["bool",15]],[[["bracket",3]],["bool",15]],[[["paren",3]],["bool",15]],[[["group",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["resultparsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstreamtokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"Pat"],[4,"MacroDelimiter"],[4,"RangeLimits"],[4,"GenericMethodArgument"],[4,"GenericParam"],[4,"Item"],[4,"TraitItem"],[4,"ImplItem"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"Stmt"],[4,"ForeignItem"],[4,"UseTree"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[4,"FnArg"],[3,"ItemForeignMod"],[3,"Signature"],[3,"TypeBareFn"],[3,"ExprReference"],[3,"TypeReference"],[3,"PatReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"ExprMethodCall"],[3,"MethodTurbofish"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprMatch"],[3,"ExprCast"],[3,"UseRename"],[3,"QSelf"],[3,"TypeGenerics"],[3,"ExprAsync"],[3,"ExprClosure"],[3,"Variant"],[3,"Field"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"FieldValue"],[3,"Arm"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Receiver"],[3,"File"],[3,"DeriveInput"],[3,"Local"],[3,"BareFnArg"],[3,"Variadic"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Macro"],[3,"TypeNever"],[3,"LitInt"],[3,"LitFloat"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"Index"],[3,"Label"],[3,"Generics"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"UsePath"],[3,"UseName"],[3,"UseGlob"],[3,"UseGroup"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"Block"],[3,"TypeArray"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Ident"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"ParseBuffer"],[3,"Lookahead1"],[3,"StepCursor"],[3,"Nothing"],[3,"Error"],[8,"Parse"],[8,"Speculative"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]},\
"vcell":{"doc":"Just like <code>Cell</code> but with volatile read / write operations","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["VolatileCell","as_ptr","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id"],"q":["vcell","","","","","","","","","","",""],"d":["Just like <code>Cell</code> but with volatile read / write operations","Returns a raw pointer to the underlying data in the cell","","","","Returns a copy of the contained value","","Creates a new <code>VolatileCell</code> containing the given value","Sets the contained value","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"VolatileCell"]]},\
"void":{"doc":"Void","t":[8,8,4,11,11,11,11,11,11,11,11,11,11,11,11,5,10,10],"n":["ResultVoidErrExt","ResultVoidExt","Void","borrow","borrow_mut","clone","eq","fmt","fmt","from","into","partial_cmp","try_from","try_into","type_id","unreachable","void_unwrap","void_unwrap_err"],"q":["void","","","","","","","","","","","","","","","","",""],"d":["Extensions to <code>Result<Void, E></code>","Extensions to <code>Result<T, Void></code>","The empty type for cases which can’t occur.","","","","","","","","","","","","","A safe version of <code>intrinsincs::unreachable</code>.","Get the value out of a wrapper.","Get the error out of a wrapper."],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,2,3],"f":[null,null,null,[[]],[[]],[[],["void",4]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["ordering",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["void",4]]],[[]],[[]]],"p":[[4,"Void"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"]]},\
"volatile_register":{"doc":"Volatile access to memory mapped hardware registers","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["RO","RW","WO","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","modify","read","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write"],"q":["volatile_register","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Read-Only register","Read-Write register","Write-Only register","","","","","","","","","","","","","Performs a read-modify-write operation","Reads the value of the register","Reads the value of the register","","","","","","","","","","Writes a <code>value</code> into the register","Writes <code>value</code> into the register"],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,1,2,3,1,2,3,1,2,3,2,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"RO"],[3,"RW"],[3,"WO"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};